{"title":"code","markdown":{"yaml":{"title":"code"},"headingText":"  word_document: default","containsRefs":false,"markdown":"\n\n---\nauthor: \"Revanth Karumajji\"\ndate: \"2024-03-11\"\noutput:\n  pdf_document: default\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## R Markdown\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n```{r}\n# Load necessary libraries\nlibrary(ggplot2)\n\n# Create example data\ndata <- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long <- tidyr::pivot_longer(data, cols = c(Government_Funding,Financing_and_other_income, Subscription_fee,Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()+\n  labs(y = \"Value (in millions)\", x = \"Year\")\n\n```\n\n```{r}\nlibrary(ggplot2)\n\n# Create example data\ndata <- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long <- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order <- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory <- factor(data_long$Subcategory, levels = stacking_order)\n\n\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()\n\n```\n\n```{r}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Create example data\ndata <- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long <- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order <- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory <- factor(data_long$Subcategory, levels = stacking_order)\n\n# Function to create the plot\ncreate_plot <- function(data, selected_option, selected_year) {\n  p <- ggplot(data, aes(x = Category, y = Value, fill = Subcategory)) +\n    geom_bar(stat = \"identity\", position = \"stack\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = selected_option)\n  \n  return(p)\n}\n\n# Create interactive plot\nplotly_plot <- ggplotly(create_plot(data_long, \"Total\"), dynamicTicks = TRUE) %>%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Total\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))), label = \"Government Funding\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Revenue\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Advertising\")\n        ),\n        x = 0.1,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      ),\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\")\n        ),\n        x = 0.3,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      )\n    )\n  )\n\nplotly_plot\n\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government Funding` = c(1213.7, 1207.7),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscription_fee` = c(124.4, 127.2),\n  `Digital` = c(31.0, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Calculate total revenue for each year\ndf$Revenue <- rowSums(df[, c(\"Financing_and_other_income\", \"Subscription_fee\", \"Digital\", \"Television\")])\n\n# Reshape the data using pivot_longer\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %>%\n  mutate(group = case_when(\n    group %in% c(\"Government Funding\", \"Revenue\") ~ \"Total\",\n    TRUE ~ group\n  ))\n\n# Create a ggplot object\np <- ggplot(df_long, aes(x = Year, y = value, fill = group)) +\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) +\n  \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Count (in millions)\",\n       x = \"Year\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n# Convert ggplot object to plotly\nplotly_plot <- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n```\n\n```{r}\nlibrary(plotly)\nlibrary(dplyr)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government_Funding` = c(1213.7, 1207.7),\n  `Revenue` = c(490.1, 573.1),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscriber_fee` = c(124.4, 127.2),\n  `Advertising` = c(248.8, 275.7),\n  `Digital` = c(31, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Reshape the data\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %>%\n  mutate(group = case_when(\n    group == \"Government_Funding\" ~ \"Government Funding\",\n    group == \"Revenue\" ~ \"Revenue\",\n    group == \"Financing_and_other_income\" ~ \"Financing and other income\",\n    group == \"Subscriber_fee\" ~ \"Subscriber fee\",\n    group == \"Advertising\" ~ \"Advertising\",\n    group == \"Digital\" ~ \"Digital\",\n    group == \"Television\" ~ \"Television\"\n  ))\n\n# Create interactive stacked bar chart\nplot <- plot_ly(df_long, x = ~Year, y = ~value, type = 'bar', color = ~group,\n                text = ~paste(\"Value: \", value),\n                hoverinfo = \"text\") %>%\n  layout(\n    title = \"Government Funding and Revenue Comparison\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Count (in millions)\"),\n    barmode = 'stack',\n    showlegend = TRUE\n  )\n\n# Add dropdown selectors for transparency\nplot <- plot %>%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(args = list(\"opacity\", 1), label = \"Full opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.7), label = \"70% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.5), label = \"50% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.3), label = \"30% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0), label = \"No opacity\", method = \"restyle\")\n        ),\n        x = 0.9,\n        y = 1.2,\n        direction = \"down\",\n        showactive = TRUE\n      )\n    )\n  )\n\n# Show the plot\nplot\n\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# Plotting using ggplot\np <- ggplot(df_long, aes(x = Category, y = Value, color = Year, group = Year)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Value\",\n       x = \"Category\") +\n  theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert ggplot object to plotly\nplotly_plot <- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui <- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver <- function(input, output) {\n  filtered_data <- reactive({\n    df_long %>%\n      filter(Year == input$year)\n  })\n  \n  output$plot <- renderPlotly({\n    p <- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\")\n  ,\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui <- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year)),\n      selectInput(\"revenue\", \"Select Revenue Components:\", \n                  choices = c(\"Financing_and_other_income\", \n                              \"Subscription_fee\", \n                              \"Digital\", \n                              \"Television\"))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver <- function(input, output) {\n  filtered_data <- reactive({\n    df_long %>%\n      filter(Year == input$year)\n  })\n  \n  revenue_data <- reactive({\n    df_long %>%\n      filter(Year == input$year & Category == input$revenue)\n  })\n  \n  output$plot <- renderPlotly({\n    p <- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_line(data = revenue_data(), aes(group = NULL), color = \"black\", size = 1.5) +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\n```\n\n```{r}\nserver <- function(input, output) {\n  filtered_data <- reactive({\n    df_long %>%\n      filter(Year == input$year)\n  })\n  \n  revenue_data <- reactive({\n    if (!is.null(input$type) && input$type == \"Revenue\") {\n      df_long %>%\n        filter(Category != \"Government_Funding\", Year == input$year)\n    } \n    else if (!is.null(input$type) && input$type == \"Advertising\") {\n      df_long %>%\n        filter(Category %in% c(\"Digital\",\"Television\"), Year == input$year)\n    }\n  })\n  \n  output$plot <- renderPlotly({\n    p <- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    if (!is.null(input$type)) {\n      if (input$type == \"Revenue\") {\n        p <- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1.5)\n      } else if (input$type == \"Advertising\") {\n        p <- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1)\n      }\n    }\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\n\n```\n","srcMarkdownNoYaml":"\n\n---\nauthor: \"Revanth Karumajji\"\ndate: \"2024-03-11\"\noutput:\n  pdf_document: default\n  word_document: default\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## R Markdown\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n```{r}\n# Load necessary libraries\nlibrary(ggplot2)\n\n# Create example data\ndata <- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long <- tidyr::pivot_longer(data, cols = c(Government_Funding,Financing_and_other_income, Subscription_fee,Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()+\n  labs(y = \"Value (in millions)\", x = \"Year\")\n\n```\n\n```{r}\nlibrary(ggplot2)\n\n# Create example data\ndata <- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long <- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order <- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory <- factor(data_long$Subcategory, levels = stacking_order)\n\n\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()\n\n```\n\n```{r}\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Create example data\ndata <- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long <- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order <- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory <- factor(data_long$Subcategory, levels = stacking_order)\n\n# Function to create the plot\ncreate_plot <- function(data, selected_option, selected_year) {\n  p <- ggplot(data, aes(x = Category, y = Value, fill = Subcategory)) +\n    geom_bar(stat = \"identity\", position = \"stack\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = selected_option)\n  \n  return(p)\n}\n\n# Create interactive plot\nplotly_plot <- ggplotly(create_plot(data_long, \"Total\"), dynamicTicks = TRUE) %>%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Total\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))), label = \"Government Funding\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Revenue\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Advertising\")\n        ),\n        x = 0.1,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      ),\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\")\n        ),\n        x = 0.3,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      )\n    )\n  )\n\nplotly_plot\n\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government Funding` = c(1213.7, 1207.7),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscription_fee` = c(124.4, 127.2),\n  `Digital` = c(31.0, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Calculate total revenue for each year\ndf$Revenue <- rowSums(df[, c(\"Financing_and_other_income\", \"Subscription_fee\", \"Digital\", \"Television\")])\n\n# Reshape the data using pivot_longer\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %>%\n  mutate(group = case_when(\n    group %in% c(\"Government Funding\", \"Revenue\") ~ \"Total\",\n    TRUE ~ group\n  ))\n\n# Create a ggplot object\np <- ggplot(df_long, aes(x = Year, y = value, fill = group)) +\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) +\n  \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Count (in millions)\",\n       x = \"Year\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n# Convert ggplot object to plotly\nplotly_plot <- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n```\n\n```{r}\nlibrary(plotly)\nlibrary(dplyr)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government_Funding` = c(1213.7, 1207.7),\n  `Revenue` = c(490.1, 573.1),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscriber_fee` = c(124.4, 127.2),\n  `Advertising` = c(248.8, 275.7),\n  `Digital` = c(31, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Reshape the data\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %>%\n  mutate(group = case_when(\n    group == \"Government_Funding\" ~ \"Government Funding\",\n    group == \"Revenue\" ~ \"Revenue\",\n    group == \"Financing_and_other_income\" ~ \"Financing and other income\",\n    group == \"Subscriber_fee\" ~ \"Subscriber fee\",\n    group == \"Advertising\" ~ \"Advertising\",\n    group == \"Digital\" ~ \"Digital\",\n    group == \"Television\" ~ \"Television\"\n  ))\n\n# Create interactive stacked bar chart\nplot <- plot_ly(df_long, x = ~Year, y = ~value, type = 'bar', color = ~group,\n                text = ~paste(\"Value: \", value),\n                hoverinfo = \"text\") %>%\n  layout(\n    title = \"Government Funding and Revenue Comparison\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Count (in millions)\"),\n    barmode = 'stack',\n    showlegend = TRUE\n  )\n\n# Add dropdown selectors for transparency\nplot <- plot %>%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(args = list(\"opacity\", 1), label = \"Full opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.7), label = \"70% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.5), label = \"50% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.3), label = \"30% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0), label = \"No opacity\", method = \"restyle\")\n        ),\n        x = 0.9,\n        y = 1.2,\n        direction = \"down\",\n        showactive = TRUE\n      )\n    )\n  )\n\n# Show the plot\nplot\n\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# Plotting using ggplot\np <- ggplot(df_long, aes(x = Category, y = Value, color = Year, group = Year)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Value\",\n       x = \"Category\") +\n  theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert ggplot object to plotly\nplotly_plot <- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui <- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver <- function(input, output) {\n  filtered_data <- reactive({\n    df_long %>%\n      filter(Year == input$year)\n  })\n  \n  output$plot <- renderPlotly({\n    p <- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\n# Sample data\ndf <- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\")\n  ,\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long <- df %>%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui <- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year)),\n      selectInput(\"revenue\", \"Select Revenue Components:\", \n                  choices = c(\"Financing_and_other_income\", \n                              \"Subscription_fee\", \n                              \"Digital\", \n                              \"Television\"))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver <- function(input, output) {\n  filtered_data <- reactive({\n    df_long %>%\n      filter(Year == input$year)\n  })\n  \n  revenue_data <- reactive({\n    df_long %>%\n      filter(Year == input$year & Category == input$revenue)\n  })\n  \n  output$plot <- renderPlotly({\n    p <- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_line(data = revenue_data(), aes(group = NULL), color = \"black\", size = 1.5) +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\n```\n\n```{r}\nserver <- function(input, output) {\n  filtered_data <- reactive({\n    df_long %>%\n      filter(Year == input$year)\n  })\n  \n  revenue_data <- reactive({\n    if (!is.null(input$type) && input$type == \"Revenue\") {\n      df_long %>%\n        filter(Category != \"Government_Funding\", Year == input$year)\n    } \n    else if (!is.null(input$type) && input$type == \"Advertising\") {\n      df_long %>%\n        filter(Category %in% c(\"Digital\",\"Television\"), Year == input$year)\n    }\n  })\n  \n  output$plot <- renderPlotly({\n    p <- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    if (!is.null(input$type)) {\n      if (input$type == \"Revenue\") {\n        p <- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1.5)\n      } else if (input$type == \"Advertising\") {\n        p <- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1)\n      }\n    }\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"pdf_document":"default","word_document":"default"},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"code.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"sketchy","title":"code","author":"Revanth Karumajji","date":"2024-03-11"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}