{"title":"Final project Code","markdown":{"yaml":{"title":"Final project Code"},"headingText":"Load the dataset","containsRefs":false,"markdown":"\nExploratory Data analysis of a Dataset:\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(dplyr)\nlibrary(readr)\nlibrary(rpart)\nlibrary(rpart.plot)\n\ndata <- read_csv(\"C:\\\\Users\\\\Vijay\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Check the structure and summary of data\nstr(data)\n```\nResearch Question 1. Which New York State counties are best suited for solar projects based on low agricultural yields of corn and hay and How do soil characteristics influence agricultural productivity in these counties, and what implications does this have for solar energy project siting?\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(dplyr)\n\n# Calculate average yield for each county\ncounty_avg_yield <- data %>%\n  group_by(County) %>%\n  summarize(Avg_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE),\n            Avg_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE))\n\n# View the resulting data frame\nprint(county_avg_yield)\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\n\n# Calculate average yield for each county\ncounty_avg_yield <- data %>%\n  group_by(County) %>%\n  summarize(Avg_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE))\n\n# Create a ggplot object for average corn yields by county\np_corn <- ggplot(data = county_avg_yield, aes(x = reorder(County, -Avg_Corn_Yield), y = Avg_Corn_Yield, fill = Avg_Corn_Yield)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Remove legend\n  scale_fill_gradient(low = \"yellow\", high = \"darkorange\") +  # Use a gradient fill from yellow to dark orange\n  labs(title = \"Average Corn Yield by County\", x = \"County\", y = \"Average Yield (ton/acre)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),  # Rotate x-axis labels for better fit\n        axis.title = element_text(size = 12, face = \"bold\"))  # Bold and larger axis titles\n\n# Convert the ggplot object to a Plotly object\nplotly_corn <- ggplotly(p_corn)\n\n# Optionally, customize further with layout options in Plotly\nplotly_corn <- layout(plotly_corn,\n                   xaxis = list(title = \"County\"),\n                   yaxis = list(title = \"Average Yield (ton/acre)\"),\n                   title = \"Average Corn Yield by County\")\n\n# Print or render the plot\nplotly_corn\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Calculate average yield for each county\ncounty_avg_yield <- data %>%\n  group_by(County) %>%\n  summarize(Avg_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE))\n\n# Create a ggplot object for average hay yields by county\np_hay <- ggplot(data = county_avg_yield, aes(x = reorder(County, -Avg_Hay_Yield), y = Avg_Hay_Yield, fill = Avg_Hay_Yield)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Remove legend\n  scale_fill_gradient(low = \"lightgreen\", high = \"darkgreen\") +  # Use a gradient fill from light green to dark green\n  labs(title = \"Average Hay Yield by County\", x = \"County\", y = \"Average Yield (ton/acre)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),  # Rotate x-axis labels for better fit\n        axis.title = element_text(size = 12, face = \"bold\"))  # Bold and larger axis titles\n\n# Convert the ggplot object to a Plotly object\nplotly_hay <- ggplotly(p_hay)\n\n# Optionally, customize further with layout options in Plotly\nplotly_hay <- layout(plotly_hay,\n                   xaxis = list(title = \"County\"),\n                   yaxis = list(title = \"Average Yield (ton/acre)\"),\n                   title = \"Average Hay Yield by County\")\n\n# Print or render the plot\nplotly_hay\n\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Calculate average yields for each county\ncounty_avg_yield <- data %>%\n  group_by(County) %>%\n  summarise(\n    Average_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE),\n    Average_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE),\n    Total_Yield = Average_Corn_Yield + Average_Hay_Yield\n  ) %>%\n  arrange(Total_Yield)  # Arrange by total average yield in ascending order\n\n# Create hover text\ncounty_avg_yield <- county_avg_yield %>%\n  mutate(Hover_Info = sprintf(\"County: %s\\nCorn Yield: %.2f ton/acre\\nHay Yield: %.2f ton/acre\\nTotal Yield: %.2f ton/acre\",\n                              County, Average_Corn_Yield, Average_Hay_Yield, Total_Yield))\n\n# Create the ggplot object with hover info\np_stacked <- ggplot(data = county_avg_yield, aes(x = reorder(County, Total_Yield), text = Hover_Info)) +\n  geom_bar(aes(y = Average_Corn_Yield), stat = \"identity\", fill = \"orange\") +\n  geom_bar(aes(y = -Average_Hay_Yield), stat = \"identity\", fill = \"lightgreen\") +\n  labs(title = \"Stacked Average Yields by County\",\n       x = \"County\", y = \"Average Yield (ton/acre)\", fill = \"Crop Type\") +\n  scale_y_continuous(labels = abs) +\n  scale_fill_manual(values = c(\"orange\", \"lightgreen\"), labels = c(\"Corn\", \"Hay\")) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))\n\n# Convert to Plotly and add custom hover info\nplotly_stacked <- ggplotly(p_stacked, tooltip = \"text\")\n\nplotly_stacked <- layout(plotly_stacked,\n                         xaxis = list(title = \"County\"),\n                         yaxis = list(title = \"Yield (ton/acre)\"),\n                         title = \"Interactive: Stacked Average Yields by County\")\nplotly_stacked\n\n\n```\n\nInteractive: Stacked Average Yields by County (Third Graph):\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load the necessary library\nlibrary(dplyr)\n\n# Assuming 'data' is already loaded into your R environment\n# Filter data for Hamilton County\nhamilton_data <- data %>%\n  filter(County == \"Hamilton\")\n\n# View the first few rows of the Hamilton data to confirm filtering\nhead(hamilton_data)\n\n# You might also want to check the structure of the filtered data\nstr(hamilton_data)\n\n```\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(dplyr)\n\n# Convert categorical variables to numeric\ndata$Soil_Temp_Regime <- as.numeric(as.factor(data$`Soil Temp. Regime`))\ndata$Texture <- as.numeric(as.factor(data$Texture))\n\n# Calculate the correlation matrix for soil characteristics and yields\ncorrelation_analysis <- data %>%\n  select(`Corn Yield (ton/acre)`, `Hay Yield (ton/acre)`, `Default Mineral Soil Group`, Soil_Temp_Regime, Texture, `TDN (ton/acre)`, `Index (TDN)`) %>%\n  cor(use = \"complete.obs\")  # Handling missing data by using complete cases\n\n# Print the correlation matrix\nprint(correlation_analysis)\n\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(plotly)\nlibrary(reshape2)\n\n# Assuming 'correlation_analysis' is your correlation matrix from earlier\ncor_data <- as.data.frame(correlation_analysis)\ncor_data$Variable <- rownames(cor_data)  # Add a new column for the row names\n\n# Convert the wide format data frame to a long format\ncor_long <- melt(cor_data, id.vars = 'Variable')\n\n# Create the heatmap with Plotly\np <- plot_ly(data = cor_long, x = ~variable, y = ~Variable, z = ~value, type = 'heatmap', colors = colorRamp(c(\"red\", \"yellow\", \"green\")),\n             hoverinfo = 'text',\n             text = ~paste('Correlation: ', round(value, 2)),\n             colorbar = list(title = 'Correlation Coefficient')) %>%\n  layout(title = 'Correlation Matrix Heatmap',\n         xaxis = list(title = 'Variable', tickangle = 90, side = 'top'),  # Correctly set the tick angle here\n         yaxis = list(title = 'Variable', ticksuffix = '  '),\n         margin = list(l = 150, b = 150))  # Adjust margins if needed\n\n# Print the plot\np\n\n```\n\nResearch Question 2 : How does the moderate positive correlation between 'Drainage' and 'Flooding' in the dataset influence our understanding of soil characteristics and their relationship to flooding risk?\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary library\nlibrary(dplyr)\n\n# Read the dataset\ndata <- read.csv(\"C:\\\\Users\\\\Vijay\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Convert factors to numeric if necessary (assuming 'Flooding' is binary or categorical)\ndata$Drainage <- as.numeric(as.factor(data$Drainage))\ndata$Flooding <- as.numeric(as.factor(data$Flooding))\n\n# Handling NA values\ndata <- na.omit(data)\n\n# Using cor.test to determine the correlation\ncor_test <- cor.test(data$Drainage, data$Flooding)\nprint(cor_test)\n```\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary libraries\nlibrary(randomForest)\nlibrary(dplyr)\ncolnames(data)\n# Handling NA values - assuming you're interested in predicting 'Flooding'\ndata_clean <- na.omit(data[, c(\"Flooding\", \"Drainage\", \"Texture\", \"Soil.Slope\", \"Capability.Class..FM5.CAP.\")])\ndata_clean$Texture <- as.numeric(as.factor(data_clean$Texture))\n\n\n\n# Convert all categorical variables to factor type\ndata_clean$Capability_Class <- as.factor(data_clean$\"Capability.Class..FM5.CAP.\")\n\n\n# Fit Random Forest model\nset.seed(123)  # for reproducibility\nrf_model <- randomForest(Flooding ~ ., data=data_clean, ntree=500, importance=TRUE)\n\n# Print model summary\nprint(rf_model)\n\n# Plot importance of variables\nvarImpPlot(rf_model)\n```\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary library\nlibrary(stats)\n\ndata$Texture <- as.numeric(as.factor(data$Texture))  # Convert categorical to numeric\ndata$Drainage <- as.numeric(as.factor(data$Drainage))  # Convert categorical to numeric if needed\n\n# Fit Multiple Regression Model with Interaction Term\nmodel_interaction <- lm(Flooding ~ Drainage * Texture, data = data)\n\n# Summary of the model to see coefficients and significance\nsummary(model_interaction)\n```\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary libraries\nlibrary(randomForest)\nlibrary(dplyr)\n\n# Prepare the data\ndata <- mutate(data, Drainage_Texture_Interaction = Drainage * Texture)\n\n# Fit Random Forest Model including the engineered interaction feature\nset.seed(123)  # for reproducibility\nrf_model_interaction <- randomForest(Flooding ~ Drainage + Texture + Drainage_Texture_Interaction, data = data, ntree = 500)\n\n# Evaluate the model (assuming Flooding is continuous; adjust as necessary)\nprint(rf_model_interaction)\n\n# Optionally, view the importance of the new interaction feature\nimportance(rf_model_interaction)\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary libraries\nlibrary(caret)\nlibrary(randomForest)\n\ndata$Texture <- as.numeric(as.factor(data$Texture))\ndata$Drainage <- as.numeric(as.factor(data$Drainage))\n\n# Define training control\ntrain_control <- trainControl(method = \"cv\", number = 10)  # 10-fold cross-validation\n\n# Fit Linear Regression Model using cross-validation\nlm_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"lm\", trControl = train_control)\n\n# Fit Random Forest Model using cross-validation\nrf_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"rf\", trControl = train_control, ntree = 500)\n\n# Summary of cross-validation results\nprint(lm_model_cv)\nprint(rf_model_cv)\n```\nDiagnostic Plots for Linear Regression\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Fit the linear model\nlm_model <- lm(Flooding ~ Drainage + Texture + Drainage:Texture, data = data)\n\n# Diagnostic plots\npar(mfrow = c(2, 2))\nplot(lm_model)\n```\nResearch Question 3: How does the presence of multiple mineral soil group (Multiple MSG Flag) affect corn and hay yield across different counties?\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary libraries\nlibrary(readr)  # For reading CSV files\nlibrary(dplyr)  # For data manipulation\nlibrary(ggplot2)  # For creating visualizations\ndata <- read.csv(\"C:\\\\Users\\\\Vijay\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Check all column names in the dataset\ncolnames(data)\n```\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Ensure 'Multiple MSG Flag' includes 'No' as a factor level correctly\ndata$`Multiple MSG Flag` <- factor(data$`Multiple.MSG.Flag`, levels = c(\"Yes\", \"No\"))\n\n# Now safely replace NA values with \"No\"\ndata$`Multiple MSG Flag`[is.na(data$`Multiple MSG Flag`)] <- \"No\"\n\n# Verify changes to ensure \"No\" is now included and NAs are handled\ntable(data$`Multiple MSG Flag`)\n\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(plotly)\n\n# Create ggplot for Corn Yield\np_corn <- ggplot(data, aes(x = `Multiple.MSG.Flag`, y = `Corn.Yield..ton.acre.`)) +\n  geom_boxplot(fill = \"blue\") +\n  labs(title = \"Corn Yield by Multiple MSG Flag\", x = \"Multiple MSG Flag\", y = \"Corn Yield\")\n\n# Convert to plotly\nplotly_corn <- ggplotly(p_corn)\n\n# Display the plots\nplotly_corn\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Create ggplot for Hay Yield\np_hay <- ggplot(data, aes(x = `Multiple.MSG.Flag`, y = `Hay.Yield..ton.acre.`)) +\n  geom_boxplot(fill = \"green\") +\n  labs(title = \"Hay Yield by Multiple MSG Flag\", x = \"Multiple MSG Flag\", y = \"Hay Yield\")\n\nplotly_hay <- ggplotly(p_hay)\nplotly_hay\n\n```\n\n\n","srcMarkdownNoYaml":"\nExploratory Data analysis of a Dataset:\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(dplyr)\nlibrary(readr)\nlibrary(rpart)\nlibrary(rpart.plot)\n\n# Load the dataset\ndata <- read_csv(\"C:\\\\Users\\\\Vijay\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Check the structure and summary of data\nstr(data)\n```\nResearch Question 1. Which New York State counties are best suited for solar projects based on low agricultural yields of corn and hay and How do soil characteristics influence agricultural productivity in these counties, and what implications does this have for solar energy project siting?\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(dplyr)\n\n# Calculate average yield for each county\ncounty_avg_yield <- data %>%\n  group_by(County) %>%\n  summarize(Avg_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE),\n            Avg_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE))\n\n# View the resulting data frame\nprint(county_avg_yield)\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\n\n# Calculate average yield for each county\ncounty_avg_yield <- data %>%\n  group_by(County) %>%\n  summarize(Avg_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE))\n\n# Create a ggplot object for average corn yields by county\np_corn <- ggplot(data = county_avg_yield, aes(x = reorder(County, -Avg_Corn_Yield), y = Avg_Corn_Yield, fill = Avg_Corn_Yield)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Remove legend\n  scale_fill_gradient(low = \"yellow\", high = \"darkorange\") +  # Use a gradient fill from yellow to dark orange\n  labs(title = \"Average Corn Yield by County\", x = \"County\", y = \"Average Yield (ton/acre)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),  # Rotate x-axis labels for better fit\n        axis.title = element_text(size = 12, face = \"bold\"))  # Bold and larger axis titles\n\n# Convert the ggplot object to a Plotly object\nplotly_corn <- ggplotly(p_corn)\n\n# Optionally, customize further with layout options in Plotly\nplotly_corn <- layout(plotly_corn,\n                   xaxis = list(title = \"County\"),\n                   yaxis = list(title = \"Average Yield (ton/acre)\"),\n                   title = \"Average Corn Yield by County\")\n\n# Print or render the plot\nplotly_corn\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Calculate average yield for each county\ncounty_avg_yield <- data %>%\n  group_by(County) %>%\n  summarize(Avg_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE))\n\n# Create a ggplot object for average hay yields by county\np_hay <- ggplot(data = county_avg_yield, aes(x = reorder(County, -Avg_Hay_Yield), y = Avg_Hay_Yield, fill = Avg_Hay_Yield)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Remove legend\n  scale_fill_gradient(low = \"lightgreen\", high = \"darkgreen\") +  # Use a gradient fill from light green to dark green\n  labs(title = \"Average Hay Yield by County\", x = \"County\", y = \"Average Yield (ton/acre)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),  # Rotate x-axis labels for better fit\n        axis.title = element_text(size = 12, face = \"bold\"))  # Bold and larger axis titles\n\n# Convert the ggplot object to a Plotly object\nplotly_hay <- ggplotly(p_hay)\n\n# Optionally, customize further with layout options in Plotly\nplotly_hay <- layout(plotly_hay,\n                   xaxis = list(title = \"County\"),\n                   yaxis = list(title = \"Average Yield (ton/acre)\"),\n                   title = \"Average Hay Yield by County\")\n\n# Print or render the plot\nplotly_hay\n\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Calculate average yields for each county\ncounty_avg_yield <- data %>%\n  group_by(County) %>%\n  summarise(\n    Average_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE),\n    Average_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE),\n    Total_Yield = Average_Corn_Yield + Average_Hay_Yield\n  ) %>%\n  arrange(Total_Yield)  # Arrange by total average yield in ascending order\n\n# Create hover text\ncounty_avg_yield <- county_avg_yield %>%\n  mutate(Hover_Info = sprintf(\"County: %s\\nCorn Yield: %.2f ton/acre\\nHay Yield: %.2f ton/acre\\nTotal Yield: %.2f ton/acre\",\n                              County, Average_Corn_Yield, Average_Hay_Yield, Total_Yield))\n\n# Create the ggplot object with hover info\np_stacked <- ggplot(data = county_avg_yield, aes(x = reorder(County, Total_Yield), text = Hover_Info)) +\n  geom_bar(aes(y = Average_Corn_Yield), stat = \"identity\", fill = \"orange\") +\n  geom_bar(aes(y = -Average_Hay_Yield), stat = \"identity\", fill = \"lightgreen\") +\n  labs(title = \"Stacked Average Yields by County\",\n       x = \"County\", y = \"Average Yield (ton/acre)\", fill = \"Crop Type\") +\n  scale_y_continuous(labels = abs) +\n  scale_fill_manual(values = c(\"orange\", \"lightgreen\"), labels = c(\"Corn\", \"Hay\")) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))\n\n# Convert to Plotly and add custom hover info\nplotly_stacked <- ggplotly(p_stacked, tooltip = \"text\")\n\nplotly_stacked <- layout(plotly_stacked,\n                         xaxis = list(title = \"County\"),\n                         yaxis = list(title = \"Yield (ton/acre)\"),\n                         title = \"Interactive: Stacked Average Yields by County\")\nplotly_stacked\n\n\n```\n\nInteractive: Stacked Average Yields by County (Third Graph):\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load the necessary library\nlibrary(dplyr)\n\n# Assuming 'data' is already loaded into your R environment\n# Filter data for Hamilton County\nhamilton_data <- data %>%\n  filter(County == \"Hamilton\")\n\n# View the first few rows of the Hamilton data to confirm filtering\nhead(hamilton_data)\n\n# You might also want to check the structure of the filtered data\nstr(hamilton_data)\n\n```\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(dplyr)\n\n# Convert categorical variables to numeric\ndata$Soil_Temp_Regime <- as.numeric(as.factor(data$`Soil Temp. Regime`))\ndata$Texture <- as.numeric(as.factor(data$Texture))\n\n# Calculate the correlation matrix for soil characteristics and yields\ncorrelation_analysis <- data %>%\n  select(`Corn Yield (ton/acre)`, `Hay Yield (ton/acre)`, `Default Mineral Soil Group`, Soil_Temp_Regime, Texture, `TDN (ton/acre)`, `Index (TDN)`) %>%\n  cor(use = \"complete.obs\")  # Handling missing data by using complete cases\n\n# Print the correlation matrix\nprint(correlation_analysis)\n\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(plotly)\nlibrary(reshape2)\n\n# Assuming 'correlation_analysis' is your correlation matrix from earlier\ncor_data <- as.data.frame(correlation_analysis)\ncor_data$Variable <- rownames(cor_data)  # Add a new column for the row names\n\n# Convert the wide format data frame to a long format\ncor_long <- melt(cor_data, id.vars = 'Variable')\n\n# Create the heatmap with Plotly\np <- plot_ly(data = cor_long, x = ~variable, y = ~Variable, z = ~value, type = 'heatmap', colors = colorRamp(c(\"red\", \"yellow\", \"green\")),\n             hoverinfo = 'text',\n             text = ~paste('Correlation: ', round(value, 2)),\n             colorbar = list(title = 'Correlation Coefficient')) %>%\n  layout(title = 'Correlation Matrix Heatmap',\n         xaxis = list(title = 'Variable', tickangle = 90, side = 'top'),  # Correctly set the tick angle here\n         yaxis = list(title = 'Variable', ticksuffix = '  '),\n         margin = list(l = 150, b = 150))  # Adjust margins if needed\n\n# Print the plot\np\n\n```\n\nResearch Question 2 : How does the moderate positive correlation between 'Drainage' and 'Flooding' in the dataset influence our understanding of soil characteristics and their relationship to flooding risk?\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary library\nlibrary(dplyr)\n\n# Read the dataset\ndata <- read.csv(\"C:\\\\Users\\\\Vijay\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Convert factors to numeric if necessary (assuming 'Flooding' is binary or categorical)\ndata$Drainage <- as.numeric(as.factor(data$Drainage))\ndata$Flooding <- as.numeric(as.factor(data$Flooding))\n\n# Handling NA values\ndata <- na.omit(data)\n\n# Using cor.test to determine the correlation\ncor_test <- cor.test(data$Drainage, data$Flooding)\nprint(cor_test)\n```\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary libraries\nlibrary(randomForest)\nlibrary(dplyr)\ncolnames(data)\n# Handling NA values - assuming you're interested in predicting 'Flooding'\ndata_clean <- na.omit(data[, c(\"Flooding\", \"Drainage\", \"Texture\", \"Soil.Slope\", \"Capability.Class..FM5.CAP.\")])\ndata_clean$Texture <- as.numeric(as.factor(data_clean$Texture))\n\n\n\n# Convert all categorical variables to factor type\ndata_clean$Capability_Class <- as.factor(data_clean$\"Capability.Class..FM5.CAP.\")\n\n\n# Fit Random Forest model\nset.seed(123)  # for reproducibility\nrf_model <- randomForest(Flooding ~ ., data=data_clean, ntree=500, importance=TRUE)\n\n# Print model summary\nprint(rf_model)\n\n# Plot importance of variables\nvarImpPlot(rf_model)\n```\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary library\nlibrary(stats)\n\ndata$Texture <- as.numeric(as.factor(data$Texture))  # Convert categorical to numeric\ndata$Drainage <- as.numeric(as.factor(data$Drainage))  # Convert categorical to numeric if needed\n\n# Fit Multiple Regression Model with Interaction Term\nmodel_interaction <- lm(Flooding ~ Drainage * Texture, data = data)\n\n# Summary of the model to see coefficients and significance\nsummary(model_interaction)\n```\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary libraries\nlibrary(randomForest)\nlibrary(dplyr)\n\n# Prepare the data\ndata <- mutate(data, Drainage_Texture_Interaction = Drainage * Texture)\n\n# Fit Random Forest Model including the engineered interaction feature\nset.seed(123)  # for reproducibility\nrf_model_interaction <- randomForest(Flooding ~ Drainage + Texture + Drainage_Texture_Interaction, data = data, ntree = 500)\n\n# Evaluate the model (assuming Flooding is continuous; adjust as necessary)\nprint(rf_model_interaction)\n\n# Optionally, view the importance of the new interaction feature\nimportance(rf_model_interaction)\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary libraries\nlibrary(caret)\nlibrary(randomForest)\n\ndata$Texture <- as.numeric(as.factor(data$Texture))\ndata$Drainage <- as.numeric(as.factor(data$Drainage))\n\n# Define training control\ntrain_control <- trainControl(method = \"cv\", number = 10)  # 10-fold cross-validation\n\n# Fit Linear Regression Model using cross-validation\nlm_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"lm\", trControl = train_control)\n\n# Fit Random Forest Model using cross-validation\nrf_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"rf\", trControl = train_control, ntree = 500)\n\n# Summary of cross-validation results\nprint(lm_model_cv)\nprint(rf_model_cv)\n```\nDiagnostic Plots for Linear Regression\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Fit the linear model\nlm_model <- lm(Flooding ~ Drainage + Texture + Drainage:Texture, data = data)\n\n# Diagnostic plots\npar(mfrow = c(2, 2))\nplot(lm_model)\n```\nResearch Question 3: How does the presence of multiple mineral soil group (Multiple MSG Flag) affect corn and hay yield across different counties?\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Load necessary libraries\nlibrary(readr)  # For reading CSV files\nlibrary(dplyr)  # For data manipulation\nlibrary(ggplot2)  # For creating visualizations\ndata <- read.csv(\"C:\\\\Users\\\\Vijay\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Check all column names in the dataset\ncolnames(data)\n```\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Ensure 'Multiple MSG Flag' includes 'No' as a factor level correctly\ndata$`Multiple MSG Flag` <- factor(data$`Multiple.MSG.Flag`, levels = c(\"Yes\", \"No\"))\n\n# Now safely replace NA values with \"No\"\ndata$`Multiple MSG Flag`[is.na(data$`Multiple MSG Flag`)] <- \"No\"\n\n# Verify changes to ensure \"No\" is now included and NAs are handled\ntable(data$`Multiple MSG Flag`)\n\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(plotly)\n\n# Create ggplot for Corn Yield\np_corn <- ggplot(data, aes(x = `Multiple.MSG.Flag`, y = `Corn.Yield..ton.acre.`)) +\n  geom_boxplot(fill = \"blue\") +\n  labs(title = \"Corn Yield by Multiple MSG Flag\", x = \"Multiple MSG Flag\", y = \"Corn Yield\")\n\n# Convert to plotly\nplotly_corn <- ggplotly(p_corn)\n\n# Display the plots\nplotly_corn\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# Create ggplot for Hay Yield\np_hay <- ggplot(data, aes(x = `Multiple.MSG.Flag`, y = `Hay.Yield..ton.acre.`)) +\n  geom_boxplot(fill = \"green\") +\n  labs(title = \"Hay Yield by Multiple MSG Flag\", x = \"Multiple MSG Flag\", y = \"Hay Yield\")\n\nplotly_hay <- ggplotly(p_hay)\nplotly_hay\n\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"final project code.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"sketchy","title":"Final project Code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}