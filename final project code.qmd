---
title: "Final project Code"
---

```{r}
# Load necessary libraries
library(readr)  # For reading CSV files
library(dplyr)  # For data manipulation
library(ggplot2)  # For creating visualizations

# dataset
data = read_csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check all column names in the dataset
colnames(data)

```

```{r}
# Ensure 'Multiple MSG Flag' includes 'No' as a factor level correctly
data$`Multiple MSG Flag` <- factor(data$`Multiple MSG Flag`, levels = c("Yes", "No"))

# Now safely replace NA values with "No"
data$`Multiple MSG Flag`[is.na(data$`Multiple MSG Flag`)] <- "No"

# Verify changes to ensure "No" is now included and NAs are handled
table(data$`Multiple MSG Flag`)


```

```{r}
library(plotly)

# Create ggplot for Corn Yield
p_corn <- ggplot(data, aes(x = `Multiple MSG Flag`, y = `Corn Yield (ton/acre)`)) +
  geom_boxplot(fill = "blue") +
  labs(title = "Corn Yield by Multiple MSG Flag", x = "Multiple MSG Flag", y = "Corn Yield")

# Convert to plotly
plotly_corn <- ggplotly(p_corn)

# Display the plots
plotly_corn



```

```{r}
# Create ggplot for Hay Yield
p_hay <- ggplot(data, aes(x = `Multiple MSG Flag`, y = `Hay Yield (ton/acre)`)) +
  geom_boxplot(fill = "green") +
  labs(title = "Hay Yield by Multiple MSG Flag", x = "Multiple MSG Flag", y = "Hay Yield")

plotly_hay <- ggplotly(p_hay)
plotly_hay
```

```{r}
# Linear regression for Corn Yield
lm_corn <- lm(`Corn Yield (ton/acre)` ~ `Multiple MSG Flag`, data = data)
summary(lm_corn)


```

```{r}

# Linear regression for Hay Yield
lm_hay <- lm(`Hay Yield (ton/acre)` ~ `Multiple MSG Flag`, data = data)
summary(lm_hay)
```

```{r}
# Load necessary libraries
library(caret)       # for data preparation and model evaluation
library(randomForest) # for random forest modeling
library(e1071)       # for SVM

# Prepare data (assuming 'data' is already loaded and cleaned)
# Ensure factor levels are correctly assigned
data$`Multiple MSG Flag` <- factor(data$`Multiple MSG Flag`, levels = c("No", "Yes"))

# Split data into training and testing sets
set.seed(123)  # for reproducibility
training_indices <- createDataPartition(data$`Corn Yield (ton/acre)`, p = 0.8, list = TRUE)
train_data <- data[training_indices[[1]], ]
test_data <- data[-training_indices[[1]], ]

# Scale data for SVM
preproc <- preProcess(train_data[, c("Corn Yield (ton/acre)", "Hay Yield (ton/acre)")], method = c("center", "scale"))
train_scaled <- predict(preproc, train_data)
test_scaled <- predict(preproc, test_data)

```

```{r}
# Check for missing values in the relevant columns of test_data
sum(is.na(test_data$`Corn Yield (ton/acre)`))
sum(is.na(test_data$`Multiple MSG Flag`))

# If there are missing values, decide on a strategy:
test_data <- test_data[!is.na(test_data$`Corn Yield (ton/acre)`) & !is.na(test_data$`Multiple MSG Flag`), ]

median_corn_yield <- median(train_data$`Corn Yield (ton/acre)`, na.rm = TRUE)
test_data$`Corn Yield (ton/acre)`[is.na(test_data$`Corn Yield (ton/acre)`)] <- median_corn_yield

```

```{r}
# Include Hay Yield in the cleaned test data
clean_test_data <- test_data[, c("Multiple MSG Flag", "Corn Yield (ton/acre)", "Hay Yield (ton/acre)")]


rf_model_corn <- randomForest(y = train_data$`Corn Yield (ton/acre)`, x = train_data[, "Multiple MSG Flag", drop = FALSE], ntree = 500)
# Predict using the Random Forest model on the updated clean test data
rf_predictions <- predict(rf_model_corn, newdata = clean_test_data)

# Display the first few predictions to verify
head(rf_predictions)

```

```{r}
# Evaluate the predictions using appropriate metrics (if your model output is designed to compare directly against Corn Yield)
rf_results <- postResample(rf_predictions, clean_test_data$`Corn Yield (ton/acre)`)
print(rf_results)

```

```{r}
# Assuming rf_results contains RMSE, R-squared, and MAE
metrics_data <- data.frame(
  Metric = c("RMSE", "R-squared", "MAE"),
  Value = c(rf_results["RMSE"], rf_results["Rsquared"], rf_results["MAE"])
)

# Print the data frame to check
print(metrics_data)

```

```{r}
library(plotly)

# Create a bar chart
plot <- plot_ly(data = metrics_data, x = ~Metric, y = ~Value, type = 'bar', 
                marker = list(color = 'rgb(158,202,225)', line = list(color = 'rgb(8,48,107)', width = 1.5)))
plot <- layout(plot, title = "Model Performance Metrics",
                yaxis = list(title = "Value"),
                xaxis = list(title = "Metric"))

# Render the plot
plot

```

```{r}
# Gauge chart for R-squared
gauge_plot <- plot_ly(
  domain = list(x = c(0, 1), y = c(0, 1)),
  value = rf_results["Rsquared"],
  title = list(text = "R-squared"),
  type = "indicator",
  mode = "gauge+number",
  gauge = list(
    axis = list(range = c(0, 1)),
    bar = list(color = "darkblue"),
    steps = list(
      list(range = c(0, 0.5), color = "red"),
      list(range = c(0.5, 0.75), color = "yellow"),
      list(range = c(0.75, 1), color = "green")
    )
  )
)

# Render the gauge chart
gauge_plot

```

```{r}
# Train the Random Forest model for Hay Yield
rf_model_hay <- randomForest(y = train_data$`Hay Yield (ton/acre)`, x = train_data[, "Multiple MSG Flag", drop = FALSE], ntree = 500)

# Check the model summary to see the details
print(summary(rf_model_hay))

```

```{r}
# Predict Hay Yield using the Random Forest model
hay_predictions <- predict(rf_model_hay, newdata = clean_test_data)

# Display the first few predictions to verify
head(hay_predictions)

```

```{r}
# Evaluate the model performance for Hay Yield predictions
hay_results <- postResample(hay_predictions, clean_test_data$`Hay Yield (ton/acre)`)

# Print the results to see the performance metrics
print(hay_results)

```

```{r}
# Assuming rf_results contains RMSE, R-squared, and MAE
metrics_datas <- data.frame(
  Metric = c("RMSE", "R-squared", "MAE"),
  Value = c(hay_results["RMSE"], hay_results["Rsquared"], hay_results["MAE"])
)

# Print the data frame to check
print(metrics_data)
```

```{r}
library(plotly)

# Create a bar chart
plot <- plot_ly(data = metrics_datas, x = ~Metric, y = ~Value, type = 'bar', 
                marker = list(color = 'rgb(158,202,225)', line = list(color = 'rgb(8,48,107)', width = 1.5)))
plot <- layout(plot, title = "Model Performance Metrics",
                yaxis = list(title = "Value"),
                xaxis = list(title = "Metric"))

# Render the plot
plot
```

```{r}
# Gauge chart for R-squared
gauge_plot <- plot_ly(
  domain = list(x = c(0, 1), y = c(0, 1)),
  value = hay_results["Rsquared"],
  title = list(text = "R-squared"),
  type = "indicator",
  mode = "gauge+number",
  gauge = list(
    axis = list(range = c(0, 1)),
    bar = list(color = "darkblue"),
    steps = list(
      list(range = c(0, 0.5), color = "red"),
      list(range = c(0.5, 0.75), color = "yellow"),
      list(range = c(0.75, 1), color = "green")
    )
  )
)

# Render the gauge chart
gauge_plot
```
