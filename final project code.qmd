---
title: "Final project Code"
---
Exploratory Data analysis of a Dataset:

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(dplyr)
library(readr)
library(rpart)
library(rpart.plot)

# Load the dataset
data <- read_csv("C:\\Users\\Vijay\\Downloads\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")

# Check the structure and summary of data
str(data)
```
Research Question 1. Which New York State counties are best suited for solar projects based on low agricultural yields of corn and hay and How do soil characteristics influence agricultural productivity in these counties, and what implications does this have for solar energy project siting?

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(dplyr)

# Calculate average yield for each county
county_avg_yield <- data %>%
  group_by(County) %>%
  summarize(Avg_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE),
            Avg_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE))

# View the resulting data frame
print(county_avg_yield)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(ggplot2)
library(plotly)
library(dplyr)

# Calculate average yield for each county
county_avg_yield <- data %>%
  group_by(County) %>%
  summarize(Avg_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE))

# Create a ggplot object for average corn yields by county
p_corn <- ggplot(data = county_avg_yield, aes(x = reorder(County, -Avg_Corn_Yield), y = Avg_Corn_Yield, fill = Avg_Corn_Yield)) +
  geom_bar(stat = "identity", show.legend = FALSE) +  # Remove legend
  scale_fill_gradient(low = "yellow", high = "darkorange") +  # Use a gradient fill from yellow to dark orange
  labs(title = "Average Corn Yield by County", x = "County", y = "Average Yield (ton/acre)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),  # Rotate x-axis labels for better fit
        axis.title = element_text(size = 12, face = "bold"))  # Bold and larger axis titles

# Convert the ggplot object to a Plotly object
plotly_corn <- ggplotly(p_corn)

# Optionally, customize further with layout options in Plotly
plotly_corn <- layout(plotly_corn,
                   xaxis = list(title = "County"),
                   yaxis = list(title = "Average Yield (ton/acre)"),
                   title = "Average Corn Yield by County")

# Print or render the plot
plotly_corn
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Calculate average yield for each county
county_avg_yield <- data %>%
  group_by(County) %>%
  summarize(Avg_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE))

# Create a ggplot object for average hay yields by county
p_hay <- ggplot(data = county_avg_yield, aes(x = reorder(County, -Avg_Hay_Yield), y = Avg_Hay_Yield, fill = Avg_Hay_Yield)) +
  geom_bar(stat = "identity", show.legend = FALSE) +  # Remove legend
  scale_fill_gradient(low = "lightgreen", high = "darkgreen") +  # Use a gradient fill from light green to dark green
  labs(title = "Average Hay Yield by County", x = "County", y = "Average Yield (ton/acre)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),  # Rotate x-axis labels for better fit
        axis.title = element_text(size = 12, face = "bold"))  # Bold and larger axis titles

# Convert the ggplot object to a Plotly object
plotly_hay <- ggplotly(p_hay)

# Optionally, customize further with layout options in Plotly
plotly_hay <- layout(plotly_hay,
                   xaxis = list(title = "County"),
                   yaxis = list(title = "Average Yield (ton/acre)"),
                   title = "Average Hay Yield by County")

# Print or render the plot
plotly_hay

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(dplyr)
library(ggplot2)
library(plotly)

# Calculate average yields for each county
county_avg_yield <- data %>%
  group_by(County) %>%
  summarise(
    Average_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE),
    Average_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE),
    Total_Yield = Average_Corn_Yield + Average_Hay_Yield
  ) %>%
  arrange(Total_Yield)  # Arrange by total average yield in ascending order

# Create hover text
county_avg_yield <- county_avg_yield %>%
  mutate(Hover_Info = sprintf("County: %s\nCorn Yield: %.2f ton/acre\nHay Yield: %.2f ton/acre\nTotal Yield: %.2f ton/acre",
                              County, Average_Corn_Yield, Average_Hay_Yield, Total_Yield))

# Create the ggplot object with hover info
p_stacked <- ggplot(data = county_avg_yield, aes(x = reorder(County, Total_Yield), text = Hover_Info)) +
  geom_bar(aes(y = Average_Corn_Yield), stat = "identity", fill = "orange") +
  geom_bar(aes(y = -Average_Hay_Yield), stat = "identity", fill = "lightgreen") +
  labs(title = "Stacked Average Yields by County",
       x = "County", y = "Average Yield (ton/acre)", fill = "Crop Type") +
  scale_y_continuous(labels = abs) +
  scale_fill_manual(values = c("orange", "lightgreen"), labels = c("Corn", "Hay")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))

# Convert to Plotly and add custom hover info
plotly_stacked <- ggplotly(p_stacked, tooltip = "text")

plotly_stacked <- layout(plotly_stacked,
                         xaxis = list(title = "County"),
                         yaxis = list(title = "Yield (ton/acre)"),
                         title = "Interactive: Stacked Average Yields by County")
plotly_stacked


```

Interactive: Stacked Average Yields by County (Third Graph):

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load the necessary library
library(dplyr)

# Assuming 'data' is already loaded into your R environment
# Filter data for Hamilton County
hamilton_data <- data %>%
  filter(County == "Hamilton")

# View the first few rows of the Hamilton data to confirm filtering
head(hamilton_data)

# You might also want to check the structure of the filtered data
str(hamilton_data)

```
```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(dplyr)

# Convert categorical variables to numeric
data$Soil_Temp_Regime <- as.numeric(as.factor(data$`Soil Temp. Regime`))
data$Texture <- as.numeric(as.factor(data$Texture))

# Calculate the correlation matrix for soil characteristics and yields
correlation_analysis <- data %>%
  select(`Corn Yield (ton/acre)`, `Hay Yield (ton/acre)`, `Default Mineral Soil Group`, Soil_Temp_Regime, Texture, `TDN (ton/acre)`, `Index (TDN)`) %>%
  cor(use = "complete.obs")  # Handling missing data by using complete cases

# Print the correlation matrix
print(correlation_analysis)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(plotly)
library(reshape2)

# Assuming 'correlation_analysis' is your correlation matrix from earlier
cor_data <- as.data.frame(correlation_analysis)
cor_data$Variable <- rownames(cor_data)  # Add a new column for the row names

# Convert the wide format data frame to a long format
cor_long <- melt(cor_data, id.vars = 'Variable')

# Create the heatmap with Plotly
p <- plot_ly(data = cor_long, x = ~variable, y = ~Variable, z = ~value, type = 'heatmap', colors = colorRamp(c("red", "yellow", "green")),
             hoverinfo = 'text',
             text = ~paste('Correlation: ', round(value, 2)),
             colorbar = list(title = 'Correlation Coefficient')) %>%
  layout(title = 'Correlation Matrix Heatmap',
         xaxis = list(title = 'Variable', tickangle = 90, side = 'top'),  # Correctly set the tick angle here
         yaxis = list(title = 'Variable', ticksuffix = '  '),
         margin = list(l = 150, b = 150))  # Adjust margins if needed

# Print the plot
p

```

Research Question 2 : How does the moderate positive correlation between 'Drainage' and 'Flooding' in the dataset influence our understanding of soil characteristics and their relationship to flooding risk?

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary library
library(dplyr)

# Read the dataset
data <- read.csv("C:\\Users\\Vijay\\Downloads\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")

# Convert factors to numeric if necessary (assuming 'Flooding' is binary or categorical)
data$Drainage <- as.numeric(as.factor(data$Drainage))
data$Flooding <- as.numeric(as.factor(data$Flooding))

# Handling NA values
data <- na.omit(data)

# Using cor.test to determine the correlation
cor_test <- cor.test(data$Drainage, data$Flooding)
print(cor_test)
```


```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary libraries
library(randomForest)
library(dplyr)
colnames(data)
# Handling NA values - assuming you're interested in predicting 'Flooding'
data_clean <- na.omit(data[, c("Flooding", "Drainage", "Texture", "Soil.Slope", "Capability.Class..FM5.CAP.")])
data_clean$Texture <- as.numeric(as.factor(data_clean$Texture))



# Convert all categorical variables to factor type
data_clean$Capability_Class <- as.factor(data_clean$"Capability.Class..FM5.CAP.")


# Fit Random Forest model
set.seed(123)  # for reproducibility
rf_model <- randomForest(Flooding ~ ., data=data_clean, ntree=500, importance=TRUE)

# Print model summary
print(rf_model)

# Plot importance of variables
varImpPlot(rf_model)
```
```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary library
library(stats)

data$Texture <- as.numeric(as.factor(data$Texture))  # Convert categorical to numeric
data$Drainage <- as.numeric(as.factor(data$Drainage))  # Convert categorical to numeric if needed

# Fit Multiple Regression Model with Interaction Term
model_interaction <- lm(Flooding ~ Drainage * Texture, data = data)

# Summary of the model to see coefficients and significance
summary(model_interaction)
```
```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary libraries
library(randomForest)
library(dplyr)

# Prepare the data
data <- mutate(data, Drainage_Texture_Interaction = Drainage * Texture)

# Fit Random Forest Model including the engineered interaction feature
set.seed(123)  # for reproducibility
rf_model_interaction <- randomForest(Flooding ~ Drainage + Texture + Drainage_Texture_Interaction, data = data, ntree = 500)

# Evaluate the model (assuming Flooding is continuous; adjust as necessary)
print(rf_model_interaction)

# Optionally, view the importance of the new interaction feature
importance(rf_model_interaction)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary libraries
library(caret)
library(randomForest)

data$Texture <- as.numeric(as.factor(data$Texture))
data$Drainage <- as.numeric(as.factor(data$Drainage))

# Define training control
train_control <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation

# Fit Linear Regression Model using cross-validation
lm_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = "lm", trControl = train_control)

# Fit Random Forest Model using cross-validation
rf_model_cv <- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = "rf", trControl = train_control, ntree = 500)

# Summary of cross-validation results
print(lm_model_cv)
print(rf_model_cv)
```
Diagnostic Plots for Linear Regression

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Fit the linear model
lm_model <- lm(Flooding ~ Drainage + Texture + Drainage:Texture, data = data)

# Diagnostic plots
par(mfrow = c(2, 2))
plot(lm_model)
```
Research Question 3: How does the presence of multiple mineral soil group (Multiple MSG Flag) affect corn and hay yield across different counties?

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary libraries
library(readr)  # For reading CSV files
library(dplyr)  # For data manipulation
library(ggplot2)  # For creating visualizations
data <- read.csv("C:\\Users\\Vijay\\Downloads\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")

# Check all column names in the dataset
colnames(data)
```
```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Ensure 'Multiple MSG Flag' includes 'No' as a factor level correctly
data$`Multiple MSG Flag` <- factor(data$`Multiple.MSG.Flag`, levels = c("Yes", "No"))

# Now safely replace NA values with "No"
data$`Multiple MSG Flag`[is.na(data$`Multiple MSG Flag`)] <- "No"

# Verify changes to ensure "No" is now included and NAs are handled
table(data$`Multiple MSG Flag`)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(plotly)

# Create ggplot for Corn Yield
p_corn <- ggplot(data, aes(x = `Multiple.MSG.Flag`, y = `Corn.Yield..ton.acre.`)) +
  geom_boxplot(fill = "blue") +
  labs(title = "Corn Yield by Multiple MSG Flag", x = "Multiple MSG Flag", y = "Corn Yield")

# Convert to plotly
plotly_corn <- ggplotly(p_corn)

# Display the plots
plotly_corn
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Create ggplot for Hay Yield
p_hay <- ggplot(data, aes(x = `Multiple.MSG.Flag`, y = `Hay.Yield..ton.acre.`)) +
  geom_boxplot(fill = "green") +
  labs(title = "Hay Yield by Multiple MSG Flag", x = "Multiple MSG Flag", y = "Hay Yield")

plotly_hay <- ggplotly(p_hay)
plotly_hay

```


