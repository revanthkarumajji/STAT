library(dplyr)  # for data manipulation
library(caret)   # for train-test split
library(glmnet) # for Lasso and Ridge regression
library(randomForest) # for Random Forest
# Load your data (replace 'your_data.csv' with your actual file path)
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check for missing values
summary(data)
# Preprocess categorical variables (e.g., convert to factors)
data$Drainage <- factor(data$Drainage)
data$Soil.Temp..Regime <- factor(data$Soil.Temp..Regime)
# ... (consider other categorical variables)
# Separate features (X) and target variable (y)
X <- data[, names(data) != "TDN..ton.acre."]
y <- data$TDN..ton.acre.
# Split data into training and testing sets (e.g., 80/20 split)
set.seed(123)  # For reproducibility
training_index <- createDataPartition(y = training_data[, 1], p = 0.8, times = 1)
# Load required libraries
library(dplyr)  # for data manipulation
library(caret)   # for train-test split
library(glmnet) # for Lasso and Ridge regression
library(randomForest) # for Random Forest
# Load your data (replace 'your_data.csv' with your actual file path)
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check for missing values
summary(data)
# Preprocess categorical variables (e.g., convert to factors)
data$Drainage <- factor(data$Drainage)
data$Soil.Temp..Regime <- factor(data$Soil.Temp..Regime)
# ... (consider other categorical variables)
# Separate features (X) and target variable (y)
X <- data[, names(data) != "TDN..ton.acre."]
y <- data$TDN..ton.acre.
training_data <- data.frame()  # Empty data frame
# Split data into training and testing sets (e.g., 80/20 split)
set.seed(123)  # For reproducibility
training_index <- createDataPartition(y = training_data[, 1], p = 0.8, times = 1)
# Load required libraries
library(dplyr)  # for data manipulation
library(caret)   # for train-test split
library(glmnet) # for Lasso and Ridge regression
library(randomForest) # for Random Forest
# Load your data (replace 'your_data.csv' with your actual file path)
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check for missing values
summary(data)
# Preprocess categorical variables (e.g., convert to factors)
data$Drainage <- factor(data$Drainage)
data$Soil.Temp..Regime <- factor(data$Soil.Temp..Regime)
# ... (consider other categorical variables)
# Separate features (X) and target variable (y)
X <- data[, names(data) != "TDN..ton.acre."]
y <- data$TDN..ton.acre.
training_data <- data.frame()  # Empty data frame
# After splitting the data...
X_train <- training_data[, names(training_data) != "TDN..ton.acre."]  # Access features excluding target
y_train <- training_data$TDN..ton.acre.  # Access target variable by name
library(caret)  # Ensure caret is loaded
# After splitting the data...
training_set <- training_data %>%
select(-TDN..ton.acre.)  # Select all features excluding target using dplyr
# Load required libraries
library(dplyr)  # for data manipulation
library(caret)   # for train-test split
library(glmnet) # for Lasso and Ridge regression
library(randomForest) # for Random Forest
# Load your data (replace 'your_data.csv' with your actual file path)
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check for missing values
summary(data)
# Preprocess categorical variables (e.g., convert to factors)
data$Drainage <- factor(data$Drainage)
data$Soil.Temp..Regime <- factor(data$Soil.Temp..Regime)
# ... (consider other categorical variables)
# Separate features (X) and target variable (y)
X <- data[, names(data) != "TDN..ton.acre."]
y <- data$TDN..ton.acre.
training_data <- data.frame()  # Empty data frame
set.seed(123)  # For reproducibility
training_index <- createDataPartition(y = training_data[, 1], p = 0.8, times = 1)
# Load required libraries
library(dplyr)  # for data manipulation
library(caret)   # for train-test split
library(glmnet) # for Lasso and Ridge regression
library(randomForest) # for Random Forest
# Load your data (replace 'your_data.csv' with your actual file path)
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check for missing values
summary(data)
# Preprocess categorical variables (e.g., convert to factors)
data$Drainage <- factor(data$Drainage)
data$Soil.Temp..Regime <- factor(data$Soil.Temp..Regime)
# ... (consider other categorical variables)
# Separate features (X) and target variable (y)
X <- data[, names(data) != "TDN..ton.acre."]
y <- data$TDN..ton.acre.
training_data <- data.frame()  # Empty data frame
# Split data into training and testing sets (e.g., 80/20 split)
set.seed(123)  # For reproducibility
training_index <- createDataPartition(y = training_data[, 1], p = 0.8, times = 1)
# Load required libraries
library(dplyr)  # for data manipulation
library(caret)   # for train-test split
library(glmnet) # for Lasso and Ridge regression
library(randomForest) # for Random Forest
# Load your data (replace 'your_data.csv' with your actual file path)
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check for missing values
summary(data)
# Preprocess categorical variables (e.g., convert to factors)
data$Drainage <- factor(data$Drainage)
data$Soil.Temp..Regime <- factor(data$Soil.Temp..Regime)
# ... (consider other categorical variables)
# Separate features (X) and target variable (y)
X <- data[, names(data) != "TDN..ton.acre."]
y <- data$TDN..ton.acre.
# **Crucial Step: Split Data into Training and Testing Sets**
set.seed(123)  # For reproducibility
training_index <- createDataPartition(y = y, p = 0.8, times = 1)
training_data <- data[training_index,]
# Load required libraries
library(dplyr)  # for data manipulation
library(caret)   # for train-test split
library(glmnet) # for Lasso and Ridge regression
library(randomForest) # for Random Forest
# Load your data (replace 'your_data.csv' with your actual file path)
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check for missing values
summary(data)
# Preprocess categorical variables (e.g., convert to factors)
data$Drainage <- factor(data$Drainage)
data$Soil.Temp..Regime <- factor(data$Soil.Temp..Regime)
# ... (consider other categorical variables)
# Separate features (X) and target variable (y)
X <- data[, names(data) != "TDN..ton.acre."]
y <- data$TDN..ton.acre.
# Split data into training and testing sets (optional, recommended for model evaluation)
# ... (uncomment and adjust if you want to split data)
# set.seed(123)  # For reproducibility
# training_index <- createDataPartition(y = y, p = 0.8, times = 1)
# training_data <- data[training_index,]
# testing_data <- data[-training_index,]
#
# X_train <- training_data[, names(training_data) != "TDN..ton.acre."]
# y_train <- training_data$TDN..ton.acre.
# Train the Random Forest Regression Model
rf_model <- randomForest(X, y, ntree = 500)  # Adjust ntree (number of trees) as needed
# Load required libraries
library(dplyr)  # for data manipulation
library(caret)   # for train-test split
library(glmnet) # for Lasso and Ridge regression
library(randomForest) # for Random Forest
# Load your data (replace 'your_data.csv' with your actual file path)
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Check for missing values
summary(data)
# Suppose 'data' is your data frame and 'column_name' is the name of the column
unique_values <- unique(data$Texture)
# Print unique values
print(unique_values)
# Suppose 'data' is your data frame and 'Texture' is the name of the column
# Define the conditions for grouping
data <- data %>%
mutate(Texture_Group = case_when(
Texture %in% c("Silty Loam", "Silty Clay Loam", "Silty Loam, Non-Calcareous") ~ "STILLY",
Texture %in% c("Muck", "Peat", "Muck/Peat") ~ "MUCK",
Texture %in% c("Loamy Fine Sand", "Fine Sandy Loam", "Very Fine Sandy Loam", "Loamy Sand", "Fine Sand", "Loamy Very Fine Sand") ~ "SANDY",
Texture %in% c("Clay", "Silty Clay", "Clay Loam") ~ "CLAY",
Texture %in% c("Sandy Loam", "Sandy Clay Loam") ~ "LOAM",
Texture == "Flaggery" ~ "FLAGGERY",
TRUE ~ "OTHER"  # For any other values not specified
))
# View the updated data frame with the new Texture_Group column
print(data$Texture_Group)
# Check and handle missing values
data <- na.omit(data)
# Normalize numeric inputs
preProcValues <- preProcess(data[, sapply(data, is.numeric)], method = c("center", "scale"))
data[, sapply(data, is.numeric)] <- predict(preProcValues, data[, sapply(data, is.numeric)])
# Setting up training control
train_control <- trainControl(method = "cv", number = 10)
# Multiple Regression for benchmarking
lm_model <- train(Corn.Yield..ton.acre. ~ ., data = data, method = "lm", trControl = train_control)
# Setting up training control
train_control <- trainControl(method = "cv", number = 10)
# Lasso Regression
lasso_model <- train(Corn.Yield..ton.acre. ~ ., data = data, method = "glmnet",
trControl = train_control, tuneLength = 10)
# Setting up training control
train_control <- trainControl(method = "cv", number = 10)
sapply(data, function(x) if(is.factor(x)) length(levels(x)) else NA)
# Lasso Regression
lasso_model <- train(Corn.Yield..ton.acre. ~ ., data = data, method = "glmnet",
trControl = train_control, tuneLength = 10)
# Setting up training control
train_control <- trainControl(method = "cv", number = 10)
sapply(data, function(x) if(is.factor(x)) length(levels(x)) else NA)
# Lasso Regression
lasso_model <- train(Corn.Yield..ton.acre. ~ ., data = data, method = "glmnet",
trControl = train_control, tuneLength = 10)
ridge_model <- train(Corn.Yield..ton.acre. ~ ., data = data, method = "glmnet",
trControl = train_control, tuneLength = 10,
tuneGrid = expand.grid(alpha = 0, lambda = seq(0.001, 0.1, length = 10)))
# Random Forest Regression
rf_model <- randomForest(Corn.Yield..ton.acre. ~ ., data = data, ntree = 500)
# Check and handle missing values
data <- na.omit(data)
# Normalize numeric inputs
preProcValues <- preProcess(data[, sapply(data, is.numeric)], method = c("center", "scale"))
data[, sapply(data, is.numeric)] <- predict(preProcValues, data[, sapply(data, is.numeric)])
# Setting up training control
train_control <- trainControl(method = "cv", number = 10)
sapply(data, function(x) if(is.factor(x)) length(levels(x)) else NA)
# Random Forest Regression
rf_model <- randomForest(Corn.Yield..ton.acre. ~ ., data = data, ntree = 500)
# Print model summaries
summary(lm_model)
summary(lasso_model)
# Setting up training control
train_control <- trainControl(method = "cv", number = 10)
sapply(data, function(x) if(is.factor(x)) length(levels(x)) else NA)
# Random Forest Regression
rf_model <- randomForest(Corn.Yield..ton.acre. ~ ., data = data, ntree = 500)
# Print model summaries
print(rf_model)
# Assuming you have a dataset named 'data' with 'Texture_Group' as one of the variables
# Check the structure of your dataset
str(data)
# Perform ANOVA for a specific variable (e.g., 'Variable_of_Interest') across 'Texture_Group'
anova_result <- aov(Variable_of_Interest ~ Texture_Group, data = data)
# Assuming you have a dataset named 'data' with 'Texture_Group' as one of the variables
# Check the structure of your dataset
str(data)
# Perform ANOVA for a specific variable (e.g., 'Variable_of_Interest') across 'Texture_Group'
# Assuming you have a dataset named 'data' with 'Texture_Group' as one of the variables
# Check the structure of your dataset
str(data)
# Perform ANOVA for all continuous variables across 'Texture_Group'
anova_results <- lapply(data[, sapply(data, is.numeric)], function(var) {
aov_result <- aov(var ~ Texture_Group, data = data)
return(summary(aov_result))
})
# Print ANOVA results
names(anova_results) <- names(data)[sapply(data, is.numeric)]
anova_results
# Summary of ANOVA results
# If the ANOVA result is significant, you can perform post-hoc tests (e.g., Tukey HSD) to identify specific differences between groups
posthoc <- TukeyHSD(anova_result)
# Assuming you have a dataset named 'data' with 'Texture_Group' as one of the variables
# Check the structure of your dataset
str(data)
# Perform ANOVA for a specific variable (e.g., 'Variable_of_Interest') across 'Texture_Group'
# Assuming you have a dataset named 'data' with 'Texture_Group' as one of the variables
# Check the structure of your dataset
str(data)
# Perform ANOVA for all continuous variables across 'Texture_Group'
anova_results <- lapply(data[, sapply(data, is.numeric)], function(var) {
aov_result <- aov(var ~ Texture_Group, data = data)
return(summary(aov_result))
})
# Print ANOVA results
names(anova_results) <- names(data)[sapply(data, is.numeric)]
anova_results
# Summary of ANOVA results
# If the ANOVA result is significant, you can perform post-hoc tests (e.g., Tukey HSD) to identify specific differences between groups
posthoc <- TukeyHSD(anova_results)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay_Yield ~ Texture, data = data)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay.Yield ~ Texture, data = data)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay.Yield..ton.acre. ~ Texture, data = data)
# Summary of the model to check for significance and coefficients
summary(model_texture_hay)
# Optional: Plot the relationship
ggplot(data, aes(x = Texture, y = Hay_Yield)) +
geom_boxplot() +
labs(title = "Impact of Soil Texture on Hay Yield",
x = "Soil Texture",
y = "Hay Yield (ton/acre)")
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay.Yield..ton.acre. ~ Texture, data = data)
# Summary of the model to check for significance and coefficients
summary(model_texture_hay)
# Optional: Plot the relationship
ggplot(data, aes(x = Texture, y = Hay.Yield..ton.acre.)) +
geom_boxplot() +
labs(title = "Impact of Soil Texture on Hay Yield",
x = "Soil Texture",
y = "Hay Yield (ton/acre)")
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay.Yield..ton.acre. ~ Texture, data = data)
# Summary of the model to check for significance and coefficients
summary(model_texture_hay)
# Optional: Plot the relationship
ggplot(data, aes(x = Texture, y = Hay.Yield..ton.acre.)) +
geom_boxplot() +
labs(title = "Impact of Soil Texture on Hay Yield",
x = "Soil Texture",
y = "Hay Yield (ton/acre)") + theme(axis.text.x = element_text(angle = 45, hjust = 1)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay.Yield..ton.acre. ~ Texture, data = data)
# Summary of the model to check for significance and coefficients
summary(model_texture_hay)
# Optional: Plot the relationship
ggplot(data, aes(x = Texture, y = Hay.Yield..ton.acre.)) +
geom_boxplot() +
labs(title = "Impact of Soil Texture on Hay Yield",
x = "Soil Texture",
y = "Hay Yield (ton/acre)") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load the necessary library
library(dplyr)
# Assuming your data is already loaded into a DataFrame named data
# Make sure to convert Texture to a factor if it isn't already
data$Texture <- as.factor(data$Texture)
# Perform the ANOVA
anova_result <- aov(Hay_Yield ~ Texture, data = data)
# Load the necessary library
library(dplyr)
# Assuming your data is already loaded into a DataFrame named data
# Make sure to convert Texture to a factor if it isn't already
data$Texture <- as.factor(data$Texture)
# Perform the ANOVA
anova_result <- aov(Hay.Yield..ton.acre. ~ Texture, data = data)
# Display the summary of the ANOVA test
summary(anova_result)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(plotly)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay.Yield..ton.acre. ~ Texture, data = data)
# Summary of the model to check for significance and coefficients
summary(model_texture_hay)
# Optional: Plot the relationship
p <- ggplot(data, aes(x = Texture, y = Hay_Yield)) +
geom_boxplot() +
labs(title = "Impact of Soil Texture on Hay Yield",
x = "Soil Texture",
y = "Hay Yield (ton/acre)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to Plotly
plotly_plot <- ggplotly(p)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(plotly)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay.Yield..ton.acre. ~ Texture, data = data)
# Summary of the model to check for significance and coefficients
summary(model_texture_hay)
# Optional: Plot the relationship
p <- ggplot(data, aes(x = Texture, y = Hay.Yield..ton.acre.)) +
geom_boxplot() +
labs(title = "Impact of Soil Texture on Hay Yield",
x = "Soil Texture",
y = "Hay Yield (ton/acre)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to Plotly
plotly_plot <- ggplotly(p)
print(plotly_plot)
# Load the necessary library
library(dplyr)
# Assuming your data is already loaded into a DataFrame named data
# Make sure to convert Texture to a factor if it isn't already
data$Texture <- as.factor(data$Texture)
# Perform the ANOVA
anova_result <- aov(Hay.Yield..ton.acre. ~ Texture, data = data)
# Display the summary of the ANOVA test
summary(anova_result)
# Load necessary library
library(tidyr)
library(dplyr)
# Perform Tukey's HSD test for pairwise comparisons
tukey_results <- TukeyHSD(anova_result)
# Extract and display the pairwise comparisons
pairwise_comparisons <- tidy(tukey_results)
# Load necessary library
library(tidyr)
library(dplyr)
# Perform Tukey's HSD test for pairwise comparisons
tukey_results <- TukeyHSD(anova_result)
tukey_results
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(plotly)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
data <- data %>%
mutate(Texture_Group = case_when(
Texture %in% c("Silty Loam", "Silty Clay Loam", "Silty Loam, Non-Calcareous") ~ "STILLY",
Texture %in% c("Muck", "Peat", "Muck/Peat") ~ "MUCK",
Texture %in% c("Loamy Fine Sand", "Fine Sandy Loam", "Very Fine Sandy Loam", "Loamy Sand", "Fine Sand", "Loamy Very Fine Sand") ~ "SANDY",
Texture %in% c("Clay", "Silty Clay", "Clay Loam") ~ "CLAY",
Texture %in% c("Sandy Loam", "Sandy Clay Loam") ~ "LOAM",
Texture == "Flaggery" ~ "FLAGGERY",
TRUE ~ "OTHER"  # For any other values not specified
))
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture_Group)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay.Yield..ton.acre. ~ Texture_Group, data = data)
# Summary of the model to check for significance and coefficients
summary(model_texture_hay)
p <- ggplot(data, aes(x = Texture_Group, y = Hay.Yield..ton.acre.)) +
geom_boxplot() +
labs(title = "Impact of Soil Texture on Hay Yield",
x = "Soil Texture",
y = "Hay Yield (ton/acre)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to Plotly
plotly_plot <- ggplotly(p)
print(plotly_plot)
# Load the necessary library
library(dplyr)
# Assuming your data is already loaded into a DataFrame named data
# Make sure to convert Texture to a factor if it isn't already
data$Texture <- as.factor(data$Texture_Group)
# Perform the ANOVA
anova_result <- aov(Hay.Yield..ton.acre. ~ Texture_Group, data = data)
# Display the summary of the ANOVA test
summary(anova_result)
# Load necessary library
library(tidyr)
library(dplyr)
# Perform Tukey's HSD test for pairwise comparisons
tukey_results <- TukeyHSD(anova_result)
tukey_results
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(plotly)
# Load your dataset
data <- read.csv("C:/Users/Vijay/Downloads/NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv")
data <- data %>%
mutate(Texture_Group = case_when(
Texture %in% c("Silty Loam", "Silty Clay Loam", "Silty Loam, Non-Calcareous") ~ "STILLY",
Texture %in% c("Muck", "Peat", "Muck/Peat") ~ "MUCK",
Texture %in% c("Loamy Fine Sand", "Fine Sandy Loam", "Very Fine Sandy Loam", "Loamy Sand", "Fine Sand", "Loamy Very Fine Sand") ~ "SANDY",
Texture %in% c("Clay", "Silty Clay", "Clay Loam") ~ "CLAY",
Texture %in% c("Sandy Loam", "Sandy Clay Loam") ~ "LOAM",
Texture == "Flaggery" ~ "FLAGGERY",
TRUE ~ "OTHER"  # For any other values not specified
))
# Ensure that the Texture variable is correctly formatted as a factor
data$Texture <- as.factor(data$Texture_Group)
# Fit a linear regression model to see the effect of Soil Texture on Hay Yield
model_texture_hay <- lm(Hay.Yield..ton.acre. ~ Texture_Group, data = data)
# Summary of the model to check for significance and coefficients
summary(model_texture_hay)
p <- ggplot(data, aes(x = Texture_Group, y = Hay.Yield..ton.acre.)) +
geom_boxplot() +
labs(title = "Impact of Soil Texture on Hay Yield",
x = "Soil Texture",
y = "Hay Yield (ton/acre)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert ggplot to Plotly
plotly_plot <- ggplotly(p)
print(plotly_plot)
