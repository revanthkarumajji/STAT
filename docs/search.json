[
  {
    "objectID": "dataset.html",
    "href": "dataset.html",
    "title": "Dataset",
    "section": "",
    "text": "This dataset provided by the New York State Energy Research and Development Authority (NYSERDA) serves participants of NYSERDA’s Large-Scale Renewable and NY-Sun programs. It contains soils data compiled from various sources, including the New York State Agricultural Land Classification master list maintained by the New York State Department of Agriculture and Markets (AGM), and the Natural Resources Conservation Service (NRCS) SSURGO soils database.\nPurpose: The dataset is intended to aid developers participating in NYSERDA’s Renewable Energy Standard (RES) Request for Proposals (RFP) or the NY-Sun program. It facilitates the protection of agricultural lands by identifying highly productive agricultural soils (Mineral Soil Groups MSG 1-4) and discouraging solar projects from siting on them.\nMitigation Approach: Developers may be required to make agricultural mitigation payments based on the extent of overlap between their solar project’s facility area and MSG 1-4 soils. These payments contribute to a fund administered by NYSERDA, supporting agricultural practices and soil conservation initiatives.\nData Sources: The dataset combines soils data from multiple sources, including the AGM’s master list of agricultural soils and the NRCS SSURGO soils database. The unique identifiers provided enable users to link the soils to the SSURGO database for geographical representation.\nData Updates: While the data is updated yearly from both NRCS and AGM, NYSERDA does not update the dataset itself. It remains intact for future reference. NYSERDA intends to create new soils datasets for future procurements on an annual basis.\nNYSERDA’s Role: NYSERDA offers objective information, analysis, innovative programs, technical expertise, and support to help New Yorkers increase energy efficiency, use renewable energy, and reduce reliance on fossil fuels."
  },
  {
    "objectID": "Skills.html",
    "href": "Skills.html",
    "title": "SKills",
    "section": "",
    "text": "While I was part of student union, I developed this skill through organizing various events, coordinating meeting and balancing my time between these responsibilities and my study."
  },
  {
    "objectID": "midproject.html",
    "href": "midproject.html",
    "title": "Mid Project(GROUP 11)",
    "section": "",
    "text": "In my future role as a data analyst, it’s crucial for me to grasp the significance of graphs as tools for visualizing analyzed information, especially for people who aren’t familiar with the subject. However, it’s equally important to recognize that graphs can sometimes mislead or manipulate audiences by conveying false information. As a data analyst, choosing the right type of graph is a critical decision because a poorly chosen one can completely alter the interpretation of the analysis.\nLet me explain this with an example: Imagine you’re analyzing sales data for a company, and you want to illustrate the sales performance over time. You could choose to represent this data using a line graph, a bar graph, or even a pie chart. Each type of graph would present the information differently, potentially leading to different conclusions. If you mistakenly choose a pie chart instead of a line graph, it might make the sales appear more evenly distributed than they actually are, giving a false impression of the company’s performance.\nNow, let’s talk about a project I’ve been working on. I came across a poorly designed graph that was unclear and possibly misleading. So, I took the initiative to redesign it, making it more straightforward, easy to understand, and ensuring that it accurately represents the data without any manipulation. This way, the reader gets a clear and truthful picture of the content without being misled by the visual representation.\n\n\n\n\n\nWhen you first look at the chart, it might seem alright, but actually, there are quite a few issues with it.\nOne big problem is with the Y-axis, the vertical line on the left side. It’s broken, and the numbers on it don’t make sense. For example, it goes from $100 million to $700 million, then suddenly jumps to $1.7 billion. This makes it look like $490 million is more than $1.2 billion, which isn’t right at all!\nAlso, when you glance at the chart, it seems like the TV revenue and government funding are about the same. This is because the blue and pink parts of the bars look almost equal in length. But that’s just because the Y-axis is messed up.\nAnother issue is that the bars for revenue and advertising shouldn’t be separate from the main bar showing total income. They’re not separate things; they’re just parts of the total income. But here, they’re showing it as if they’re different things, which can be confusing.\n\n\n\n\n\n\nI’ve redesigned the graph to fix the above mentioned issues and even made it interactive. This means that when you look at it, you can click on different parts and get more information. This makes it easier for people to understand and engage with the data.\nHere is the link to the video where I discussed my project in detail:\nhttps://youtu.be/iNPj6kIkjdY\nReference for the Bad Graph:\n[Funding of a broadcast company in two financial years ] (https://cbc.radio-canada.ca/en/impact-and-accountability/finance/annual-reports/ar-2018-2019/financial-sustainability/revenue-and-other-funds)"
  },
  {
    "objectID": "midproject.html#bad-graph-chosen",
    "href": "midproject.html#bad-graph-chosen",
    "title": "Mid Project(GROUP 11)",
    "section": "",
    "text": "When you first look at the chart, it might seem alright, but actually, there are quite a few issues with it.\nOne big problem is with the Y-axis, the vertical line on the left side. It’s broken, and the numbers on it don’t make sense. For example, it goes from $100 million to $700 million, then suddenly jumps to $1.7 billion. This makes it look like $490 million is more than $1.2 billion, which isn’t right at all!\nAlso, when you glance at the chart, it seems like the TV revenue and government funding are about the same. This is because the blue and pink parts of the bars look almost equal in length. But that’s just because the Y-axis is messed up.\nAnother issue is that the bars for revenue and advertising shouldn’t be separate from the main bar showing total income. They’re not separate things; they’re just parts of the total income. But here, they’re showing it as if they’re different things, which can be confusing."
  },
  {
    "objectID": "midproject.html#redesigned-plots",
    "href": "midproject.html#redesigned-plots",
    "title": "Mid Project(GROUP 11)",
    "section": "",
    "text": "I’ve redesigned the graph to fix the above mentioned issues and even made it interactive. This means that when you look at it, you can click on different parts and get more information. This makes it easier for people to understand and engage with the data.\nHere is the link to the video where I discussed my project in detail:\nhttps://youtu.be/iNPj6kIkjdY\nReference for the Bad Graph:\n[Funding of a broadcast company in two financial years ] (https://cbc.radio-canada.ca/en/impact-and-accountability/finance/annual-reports/ar-2018-2019/financial-sustainability/revenue-and-other-funds)"
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "code",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n# Load necessary libraries\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding,Financing_and_other_income, Subscription_fee,Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()+\n  labs(y = \"Value (in millions)\", x = \"Year\")\n\n\n\n\n\nlibrary(ggplot2)\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order &lt;- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory &lt;- factor(data_long$Subcategory, levels = stacking_order)\n\n\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order &lt;- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory &lt;- factor(data_long$Subcategory, levels = stacking_order)\n\n# Function to create the plot\ncreate_plot &lt;- function(data, selected_option, selected_year) {\n  p &lt;- ggplot(data, aes(x = Category, y = Value, fill = Subcategory)) +\n    geom_bar(stat = \"identity\", position = \"stack\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = selected_option)\n  \n  return(p)\n}\n\n# Create interactive plot\nplotly_plot &lt;- ggplotly(create_plot(data_long, \"Total\"), dynamicTicks = TRUE) %&gt;%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Total\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))), label = \"Government Funding\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Revenue\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Advertising\")\n        ),\n        x = 0.1,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      ),\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\")\n        ),\n        x = 0.3,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      )\n    )\n  )\n\nplotly_plot\n\n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government Funding` = c(1213.7, 1207.7),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscription_fee` = c(124.4, 127.2),\n  `Digital` = c(31.0, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Calculate total revenue for each year\ndf$Revenue &lt;- rowSums(df[, c(\"Financing_and_other_income\", \"Subscription_fee\", \"Digital\", \"Television\")])\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %&gt;%\n  mutate(group = case_when(\n    group %in% c(\"Government Funding\", \"Revenue\") ~ \"Total\",\n    TRUE ~ group\n  ))\n\n# Create a ggplot object\np &lt;- ggplot(df_long, aes(x = Year, y = value, fill = group)) +\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) +\n  \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Count (in millions)\",\n       x = \"Year\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n# Convert ggplot object to plotly\nplotly_plot &lt;- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n\n\n\n\nlibrary(plotly)\nlibrary(dplyr)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government_Funding` = c(1213.7, 1207.7),\n  `Revenue` = c(490.1, 573.1),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscriber_fee` = c(124.4, 127.2),\n  `Advertising` = c(248.8, 275.7),\n  `Digital` = c(31, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Reshape the data\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %&gt;%\n  mutate(group = case_when(\n    group == \"Government_Funding\" ~ \"Government Funding\",\n    group == \"Revenue\" ~ \"Revenue\",\n    group == \"Financing_and_other_income\" ~ \"Financing and other income\",\n    group == \"Subscriber_fee\" ~ \"Subscriber fee\",\n    group == \"Advertising\" ~ \"Advertising\",\n    group == \"Digital\" ~ \"Digital\",\n    group == \"Television\" ~ \"Television\"\n  ))\n\n# Create interactive stacked bar chart\nplot &lt;- plot_ly(df_long, x = ~Year, y = ~value, type = 'bar', color = ~group,\n                text = ~paste(\"Value: \", value),\n                hoverinfo = \"text\") %&gt;%\n  layout(\n    title = \"Government Funding and Revenue Comparison\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Count (in millions)\"),\n    barmode = 'stack',\n    showlegend = TRUE\n  )\n\n# Add dropdown selectors for transparency\nplot &lt;- plot %&gt;%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(args = list(\"opacity\", 1), label = \"Full opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.7), label = \"70% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.5), label = \"50% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.3), label = \"30% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0), label = \"No opacity\", method = \"restyle\")\n        ),\n        x = 0.9,\n        y = 1.2,\n        direction = \"down\",\n        showactive = TRUE\n      )\n    )\n  )\n\n# Show the plot\nplot\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# Plotting using ggplot\np &lt;- ggplot(df_long, aes(x = Category, y = Value, color = Year, group = Year)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Value\",\n       x = \"Category\") +\n  theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert ggplot object to plotly\nplotly_plot &lt;- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\nWarning: package 'shiny' was built under R version 4.3.3\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui &lt;- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\")\n  ,\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui &lt;- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year)),\n      selectInput(\"revenue\", \"Select Revenue Components:\", \n                  choices = c(\"Financing_and_other_income\", \n                              \"Subscription_fee\", \n                              \"Digital\", \n                              \"Television\"))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  revenue_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year & Category == input$revenue)\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_line(data = revenue_data(), aes(group = NULL), color = \"black\", size = 1.5) +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  revenue_data &lt;- reactive({\n    if (!is.null(input$type) && input$type == \"Revenue\") {\n      df_long %&gt;%\n        filter(Category != \"Government_Funding\", Year == input$year)\n    } \n    else if (!is.null(input$type) && input$type == \"Advertising\") {\n      df_long %&gt;%\n        filter(Category %in% c(\"Digital\",\"Television\"), Year == input$year)\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    if (!is.null(input$type)) {\n      if (input$type == \"Revenue\") {\n        p &lt;- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1.5)\n      } else if (input$type == \"Advertising\") {\n        p &lt;- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1)\n      }\n    }\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "code.html#r-markdown",
    "href": "code.html#r-markdown",
    "title": "code",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n# Load necessary libraries\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding,Financing_and_other_income, Subscription_fee,Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()+\n  labs(y = \"Value (in millions)\", x = \"Year\")\n\n\n\n\n\nlibrary(ggplot2)\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order &lt;- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory &lt;- factor(data_long$Subcategory, levels = stacking_order)\n\n\n\n# Plot\nggplot(data_long, aes(x = Category, y = Value, fill = Subcategory)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +  # Flip the coordinates for horizontal bars\n  geom_bar(data = data, aes(x = Category, y = Total), stat = \"identity\", fill = \"transparent\") +\n  theme_minimal()\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Create example data\ndata &lt;- data.frame(\n  Category = c(\"2017-2018\", \"2018-2019\"),\n  Total = c(1780.8, 1703.8),\n  Government_Funding = c(1213.7, 1207.7),\n  Revenue = c(490.1, 573.1),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Advertising = c(248.8, 275.7),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data\ndata_long &lt;- tidyr::pivot_longer(data, cols = c(Government_Funding, Financing_and_other_income, Subscription_fee, Digital, Television), names_to = \"Subcategory\", values_to = \"Value\")\n\n# Determine the order of stacking\nstacking_order &lt;- c(\"Government_Funding\", \"Financing_and_other_income\", \"Subscription_fee\", \"Television\", \"Digital\")\n\n# Convert Subcategory to factor and set levels according to stacking order\ndata_long$Subcategory &lt;- factor(data_long$Subcategory, levels = stacking_order)\n\n# Function to create the plot\ncreate_plot &lt;- function(data, selected_option, selected_year) {\n  p &lt;- ggplot(data, aes(x = Category, y = Value, fill = Subcategory)) +\n    geom_bar(stat = \"identity\", position = \"stack\") +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = selected_option)\n  \n  return(p)\n}\n\n# Create interactive plot\nplotly_plot &lt;- ggplotly(create_plot(data_long, \"Total\"), dynamicTicks = TRUE) %&gt;%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Total\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE))), label = \"Government Funding\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Revenue\"),\n          list(method = \"update\", args = list(list(visible = list(FALSE,FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE))), label = \"Advertising\")\n        ),\n        x = 0.1,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      ),\n      list(\n        buttons = list(\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\"),\n          list(method = \"update\", args = list(list(visible = list(TRUE, TRUE))), label = \"\")\n        ),\n        x = 0.3,\n        xanchor = \"left\",\n        y = 1.15,\n        yanchor = \"top\",\n        font = list(size = 12)\n      )\n    )\n  )\n\nplotly_plot\n\n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government Funding` = c(1213.7, 1207.7),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscription_fee` = c(124.4, 127.2),\n  `Digital` = c(31.0, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Calculate total revenue for each year\ndf$Revenue &lt;- rowSums(df[, c(\"Financing_and_other_income\", \"Subscription_fee\", \"Digital\", \"Television\")])\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %&gt;%\n  mutate(group = case_when(\n    group %in% c(\"Government Funding\", \"Revenue\") ~ \"Total\",\n    TRUE ~ group\n  ))\n\n# Create a ggplot object\np &lt;- ggplot(df_long, aes(x = Year, y = value, fill = group)) +\n  geom_bar(stat = \"identity\", position = \"stack\", width = 0.7) +\n  \n  scale_y_continuous(labels = scales::comma_format()) +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Count (in millions)\",\n       x = \"Year\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n# Convert ggplot object to plotly\nplotly_plot &lt;- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n\n\n\n\nlibrary(plotly)\nlibrary(dplyr)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  `Government_Funding` = c(1213.7, 1207.7),\n  `Revenue` = c(490.1, 573.1),\n  `Financing_and_other_income` = c(116.9, 127.6),\n  `Subscriber_fee` = c(124.4, 127.2),\n  `Advertising` = c(248.8, 275.7),\n  `Digital` = c(31, 42.6),\n  `Television` = c(217.8, 275.7)\n)\n\n# Reshape the data\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"group\", values_to = \"value\") %&gt;%\n  mutate(group = case_when(\n    group == \"Government_Funding\" ~ \"Government Funding\",\n    group == \"Revenue\" ~ \"Revenue\",\n    group == \"Financing_and_other_income\" ~ \"Financing and other income\",\n    group == \"Subscriber_fee\" ~ \"Subscriber fee\",\n    group == \"Advertising\" ~ \"Advertising\",\n    group == \"Digital\" ~ \"Digital\",\n    group == \"Television\" ~ \"Television\"\n  ))\n\n# Create interactive stacked bar chart\nplot &lt;- plot_ly(df_long, x = ~Year, y = ~value, type = 'bar', color = ~group,\n                text = ~paste(\"Value: \", value),\n                hoverinfo = \"text\") %&gt;%\n  layout(\n    title = \"Government Funding and Revenue Comparison\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Count (in millions)\"),\n    barmode = 'stack',\n    showlegend = TRUE\n  )\n\n# Add dropdown selectors for transparency\nplot &lt;- plot %&gt;%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = list(\n          list(args = list(\"opacity\", 1), label = \"Full opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.7), label = \"70% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.5), label = \"50% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0.3), label = \"30% opacity\", method = \"restyle\"),\n          list(args = list(\"opacity\", 0), label = \"No opacity\", method = \"restyle\")\n        ),\n        x = 0.9,\n        y = 1.2,\n        direction = \"down\",\n        showactive = TRUE\n      )\n    )\n  )\n\n# Show the plot\nplot\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# Plotting using ggplot\np &lt;- ggplot(df_long, aes(x = Category, y = Value, color = Year, group = Year)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Funding and Revenue Comparison\",\n       y = \"Value\",\n       x = \"Category\") +\n  theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert ggplot object to plotly\nplotly_plot &lt;- ggplotly(p, tooltip = c(\"x\", \"y\")) \n\n# Show the interactive plot\nplotly_plot\n\n\n\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\nWarning: package 'shiny' was built under R version 4.3.3\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\"),\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui &lt;- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal()+\n       theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(shiny)\n\n# Sample data\ndf &lt;- data.frame(\n  Year = c(\"2018-2019\", \"2017-2018\")\n  ,\n  Government_Funding = c(1213.7, 1207.7),\n  Financing_and_other_income = c(116.9, 127.6),\n  Subscription_fee = c(124.4, 127.2),\n  Digital = c(31.0, 42.6),\n  Television = c(217.8, 275.7)\n)\n\n# Reshape the data using pivot_longer\ndf_long &lt;- df %&gt;%\n  pivot_longer(cols = -Year, names_to = \"Category\", values_to = \"Value\") \n\n# UI for Shiny app\nui &lt;- fluidPage(\n  titlePanel(\"Funding and Revenue Comparison\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"year\", \"Select Year:\", choices = unique(df$Year)),\n      selectInput(\"revenue\", \"Select Revenue Components:\", \n                  choices = c(\"Financing_and_other_income\", \n                              \"Subscription_fee\", \n                              \"Digital\", \n                              \"Television\"))\n    ),\n    mainPanel(\n      plotlyOutput(\"plot\")\n    )\n  )\n)\n\n# Server logic for Shiny app\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  revenue_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year & Category == input$revenue)\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_line(data = revenue_data(), aes(group = NULL), color = \"black\", size = 1.5) +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\nserver &lt;- function(input, output) {\n  filtered_data &lt;- reactive({\n    df_long %&gt;%\n      filter(Year == input$year)\n  })\n  \n  revenue_data &lt;- reactive({\n    if (!is.null(input$type) && input$type == \"Revenue\") {\n      df_long %&gt;%\n        filter(Category != \"Government_Funding\", Year == input$year)\n    } \n    else if (!is.null(input$type) && input$type == \"Advertising\") {\n      df_long %&gt;%\n        filter(Category %in% c(\"Digital\",\"Television\"), Year == input$year)\n    }\n  })\n  \n  output$plot &lt;- renderPlotly({\n    p &lt;- ggplot(filtered_data(), aes(x = Category, y = Value, color = Year, group = Year)) +\n      geom_line() +\n      geom_point() +\n      geom_point(data = revenue_data(), color = \"black\", size = 3) +\n      labs(title = paste(\"Funding and Revenue Comparison for\", input$year),\n           y = \"Value\",\n           x = \"Category\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    if (!is.null(input$type)) {\n      if (input$type == \"Revenue\") {\n        p &lt;- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1.5)\n      } else if (input$type == \"Advertising\") {\n        p &lt;- p + geom_line(data = revenue_data(), aes(group = Year), color = \"black\", size = 1)\n      }\n    }\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\")) \n  })\n}\n\n# Run the Shiny app\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "final project code.html",
    "href": "final project code.html",
    "title": "Final project Code",
    "section": "",
    "text": "Exploratory Data analysis of a Dataset:\n\n\nShow the code\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nShow the code\nlibrary(readr)\nlibrary(rpart)\nlibrary(rpart.plot)\n\n\nWarning: package 'rpart.plot' was built under R version 4.3.3\n\n\nShow the code\n# Load the dataset\ndata &lt;- read_csv(\"C:\\\\Users\\\\Vijay\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n\nRows: 8513 Columns: 24\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (16): County, County_MAPSYM, MAPSYM, Multiple MSG Flag, Flag - Fields, C...\ndbl  (8): MUKEY, Default Mineral Soil Group, Flag - MSG Values, Rotation, Co...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\n# Check the structure and summary of data\nstr(data)\n\n\nspc_tbl_ [8,513 × 24] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ County                    : chr [1:8513] \"Albany\" \"Albany\" \"Albany\" \"Albany\" ...\n $ County_MAPSYM             : chr [1:8513] \"NY001_AE\" \"NY001_ANA\" \"NY001_ANB\" \"NY001_ANC\" ...\n $ MAPSYM                    : chr [1:8513] \"Ae\" \"AnA\" \"AnB\" \"AnC\" ...\n $ MUKEY                     : num [1:8513] 288688 288689 288690 288691 288692 ...\n $ Default Mineral Soil Group: num [1:8513] 7 6 6 7 8 8 9 7 5 5 ...\n $ Multiple MSG Flag         : chr [1:8513] NA NA NA NA ...\n $ Flag - MSG Values         : num [1:8513] NA NA NA NA NA NA NA NA NA NA ...\n $ Flag - Fields             : chr [1:8513] NA NA NA NA ...\n $ Capability Class (FM5 CAP): chr [1:8513] \"4W\" \"3W\" \"3W\" \"3E\" ...\n $ Soil Temp. Regime         : chr [1:8513] \"Mesic\" \"Mesic\" \"Mesic\" \"Mesic\" ...\n $ Soil Modifier             : chr [1:8513] NA NA NA NA ...\n $ Soil Slope                : chr [1:8513] \"\\\"00-03\\\"\" \"\\\"00-03\\\"\" \"\\\"03-08\\\"\" \"\\\"08-15\\\"\" ...\n $ Soil Name                 : chr [1:8513] \"ALLIS\" \"ANGOLA\" \"ANGOLA\" \"ANGOLA\" ...\n $ Drainage                  : chr [1:8513] \"Poorly Drained\" \"Somewhat Well-Drained\" \"Somewhat Well-Drained\" \"Somewhat Well-Drained\" ...\n $ Modifier                  : chr [1:8513] NA NA NA NA ...\n $ Texture                   : chr [1:8513] \"Silty Loam\" \"Silty Loam\" \"Silty Loam\" \"Silty Loam\" ...\n $ Flooding                  : chr [1:8513] NA NA NA NA ...\n $ Lime                      : chr [1:8513] \"Requires lime additions within every rotation\" \"Requires lime additions within every rotation\" \"Requires lime additions within every rotation\" \"Requires lime additions within every rotation\" ...\n $ Rotation                  : num [1:8513] 2 3 3 1 2 3 0 2 4 4 ...\n $ Corn Yield (ton/acre)     : num [1:8513] 7.5 12 12 11.2 6 ...\n $ Hay Yield (ton/acre)      : num [1:8513] 1.6 1.95 1.95 1.6 0.96 0 0 1.6 2.64 2.64 ...\n $ Change                    : chr [1:8513] NA NA NA NA ...\n $ TDN (ton/acre)            : num [1:8513] 0.94 1.4 1.4 0.95 0.48 0 0 1 1.81 1.81 ...\n $ Index (TDN)               : num [1:8513] 20.7 30.9 30.9 20.8 10.6 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   County = col_character(),\n  ..   County_MAPSYM = col_character(),\n  ..   MAPSYM = col_character(),\n  ..   MUKEY = col_double(),\n  ..   `Default Mineral Soil Group` = col_double(),\n  ..   `Multiple MSG Flag` = col_character(),\n  ..   `Flag - MSG Values` = col_double(),\n  ..   `Flag - Fields` = col_character(),\n  ..   `Capability Class (FM5 CAP)` = col_character(),\n  ..   `Soil Temp. Regime` = col_character(),\n  ..   `Soil Modifier` = col_character(),\n  ..   `Soil Slope` = col_character(),\n  ..   `Soil Name` = col_character(),\n  ..   Drainage = col_character(),\n  ..   Modifier = col_character(),\n  ..   Texture = col_character(),\n  ..   Flooding = col_character(),\n  ..   Lime = col_character(),\n  ..   Rotation = col_double(),\n  ..   `Corn Yield (ton/acre)` = col_double(),\n  ..   `Hay Yield (ton/acre)` = col_double(),\n  ..   Change = col_character(),\n  ..   `TDN (ton/acre)` = col_double(),\n  ..   `Index (TDN)` = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nResearch Question 1. Which New York State counties are best suited for solar projects based on low agricultural yields of corn and hay and How do soil characteristics influence agricultural productivity in these counties, and what implications does this have for solar energy project siting?\n\n\nShow the code\nlibrary(dplyr)\n\n# Calculate average yield for each county\ncounty_avg_yield &lt;- data %&gt;%\n  group_by(County) %&gt;%\n  summarize(Avg_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE),\n            Avg_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE))\n\n# View the resulting data frame\nprint(county_avg_yield)\n\n\n# A tibble: 58 × 3\n   County      Avg_Corn_Yield Avg_Hay_Yield\n   &lt;chr&gt;                &lt;dbl&gt;         &lt;dbl&gt;\n 1 Albany                9.96          1.95\n 2 Allegany              8.55          1.66\n 3 Broome                9.28          1.75\n 4 Cattaraugus           9.39          1.77\n 5 Cayuga               12.2           2.33\n 6 Chautauqua           10.9           2.15\n 7 Chemung              11.9           2.25\n 8 Chenango             11.0           2.21\n 9 Clinton               7.64          1.35\n10 Columbia             10.7           2.12\n# ℹ 48 more rows\n\n\n\n\nShow the code\nlibrary(ggplot2)\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nShow the code\nlibrary(plotly)\n\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nShow the code\nlibrary(dplyr)\n\n# Calculate average yield for each county\ncounty_avg_yield &lt;- data %&gt;%\n  group_by(County) %&gt;%\n  summarize(Avg_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE))\n\n# Create a ggplot object for average corn yields by county\np_corn &lt;- ggplot(data = county_avg_yield, aes(x = reorder(County, -Avg_Corn_Yield), y = Avg_Corn_Yield, fill = Avg_Corn_Yield)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Remove legend\n  scale_fill_gradient(low = \"yellow\", high = \"darkorange\") +  # Use a gradient fill from yellow to dark orange\n  labs(title = \"Average Corn Yield by County\", x = \"County\", y = \"Average Yield (ton/acre)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),  # Rotate x-axis labels for better fit\n        axis.title = element_text(size = 12, face = \"bold\"))  # Bold and larger axis titles\n\n# Convert the ggplot object to a Plotly object\nplotly_corn &lt;- ggplotly(p_corn)\n\n# Optionally, customize further with layout options in Plotly\nplotly_corn &lt;- layout(plotly_corn,\n                   xaxis = list(title = \"County\"),\n                   yaxis = list(title = \"Average Yield (ton/acre)\"),\n                   title = \"Average Corn Yield by County\")\n\n# Print or render the plot\nplotly_corn\n\n\n\n\n\n\n\n\nShow the code\n# Calculate average yield for each county\ncounty_avg_yield &lt;- data %&gt;%\n  group_by(County) %&gt;%\n  summarize(Avg_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE))\n\n# Create a ggplot object for average hay yields by county\np_hay &lt;- ggplot(data = county_avg_yield, aes(x = reorder(County, -Avg_Hay_Yield), y = Avg_Hay_Yield, fill = Avg_Hay_Yield)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +  # Remove legend\n  scale_fill_gradient(low = \"lightgreen\", high = \"darkgreen\") +  # Use a gradient fill from light green to dark green\n  labs(title = \"Average Hay Yield by County\", x = \"County\", y = \"Average Yield (ton/acre)\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),  # Rotate x-axis labels for better fit\n        axis.title = element_text(size = 12, face = \"bold\"))  # Bold and larger axis titles\n\n# Convert the ggplot object to a Plotly object\nplotly_hay &lt;- ggplotly(p_hay)\n\n# Optionally, customize further with layout options in Plotly\nplotly_hay &lt;- layout(plotly_hay,\n                   xaxis = list(title = \"County\"),\n                   yaxis = list(title = \"Average Yield (ton/acre)\"),\n                   title = \"Average Hay Yield by County\")\n\n# Print or render the plot\nplotly_hay\n\n\n\n\n\n\n\n\nShow the code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Calculate average yields for each county\ncounty_avg_yield &lt;- data %&gt;%\n  group_by(County) %&gt;%\n  summarise(\n    Average_Corn_Yield = mean(`Corn Yield (ton/acre)`, na.rm = TRUE),\n    Average_Hay_Yield = mean(`Hay Yield (ton/acre)`, na.rm = TRUE),\n    Total_Yield = Average_Corn_Yield + Average_Hay_Yield\n  ) %&gt;%\n  arrange(Total_Yield)  # Arrange by total average yield in ascending order\n\n# Create hover text\ncounty_avg_yield &lt;- county_avg_yield %&gt;%\n  mutate(Hover_Info = sprintf(\"County: %s\\nCorn Yield: %.2f ton/acre\\nHay Yield: %.2f ton/acre\\nTotal Yield: %.2f ton/acre\",\n                              County, Average_Corn_Yield, Average_Hay_Yield, Total_Yield))\n\n# Create the ggplot object with hover info\np_stacked &lt;- ggplot(data = county_avg_yield, aes(x = reorder(County, Total_Yield), text = Hover_Info)) +\n  geom_bar(aes(y = Average_Corn_Yield), stat = \"identity\", fill = \"orange\") +\n  geom_bar(aes(y = -Average_Hay_Yield), stat = \"identity\", fill = \"lightgreen\") +\n  labs(title = \"Stacked Average Yields by County\",\n       x = \"County\", y = \"Average Yield (ton/acre)\", fill = \"Crop Type\") +\n  scale_y_continuous(labels = abs) +\n  scale_fill_manual(values = c(\"orange\", \"lightgreen\"), labels = c(\"Corn\", \"Hay\")) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))\n\n# Convert to Plotly and add custom hover info\nplotly_stacked &lt;- ggplotly(p_stacked, tooltip = \"text\")\n\nplotly_stacked &lt;- layout(plotly_stacked,\n                         xaxis = list(title = \"County\"),\n                         yaxis = list(title = \"Yield (ton/acre)\"),\n                         title = \"Interactive: Stacked Average Yields by County\")\nplotly_stacked\n\n\n\n\n\n\nInteractive: Stacked Average Yields by County (Third Graph):\n\n\nShow the code\n# Load the necessary library\nlibrary(dplyr)\n\n# Assuming 'data' is already loaded into your R environment\n# Filter data for Hamilton County\nhamilton_data &lt;- data %&gt;%\n  filter(County == \"Hamilton\")\n\n# View the first few rows of the Hamilton data to confirm filtering\nhead(hamilton_data)\n\n\n# A tibble: 6 × 24\n  County  County_MAPSYM MAPSYM  MUKEY Default Mineral Soil…¹ `Multiple MSG Flag`\n  &lt;chr&gt;   &lt;chr&gt;         &lt;chr&gt;   &lt;dbl&gt;                  &lt;dbl&gt; &lt;chr&gt;              \n1 Hamilt… NY041_3A      3A     2.92e5                      9 &lt;NA&gt;               \n2 Hamilt… NY041_10A     10A    3.12e6                      7 Yes                \n3 Hamilt… NY041_21A     21A    2.92e5                      9 &lt;NA&gt;               \n4 Hamilt… NY041_23A     23A    2.92e5                      7 Yes                \n5 Hamilt… NY041_24A     24A    2.92e5                      6 Yes                \n6 Hamilt… NY041_25A     25A    2.92e5                      5 Yes                \n# ℹ abbreviated name: ¹​`Default Mineral Soil Group`\n# ℹ 18 more variables: `Flag - MSG Values` &lt;dbl&gt;, `Flag - Fields` &lt;chr&gt;,\n#   `Capability Class (FM5 CAP)` &lt;chr&gt;, `Soil Temp. Regime` &lt;chr&gt;,\n#   `Soil Modifier` &lt;chr&gt;, `Soil Slope` &lt;chr&gt;, `Soil Name` &lt;chr&gt;,\n#   Drainage &lt;chr&gt;, Modifier &lt;chr&gt;, Texture &lt;chr&gt;, Flooding &lt;chr&gt;, Lime &lt;chr&gt;,\n#   Rotation &lt;dbl&gt;, `Corn Yield (ton/acre)` &lt;dbl&gt;,\n#   `Hay Yield (ton/acre)` &lt;dbl&gt;, Change &lt;chr&gt;, `TDN (ton/acre)` &lt;dbl&gt;, …\n\n\nShow the code\n# You might also want to check the structure of the filtered data\nstr(hamilton_data)\n\n\nspc_tbl_ [76 × 24] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ County                    : chr [1:76] \"Hamilton\" \"Hamilton\" \"Hamilton\" \"Hamilton\" ...\n $ County_MAPSYM             : chr [1:76] \"NY041_3A\" \"NY041_10A\" \"NY041_21A\" \"NY041_23A\" ...\n $ MAPSYM                    : chr [1:76] \"3A\" \"10A\" \"21A\" \"23A\" ...\n $ MUKEY                     : num [1:76] 291953 3118070 291941 291942 291943 ...\n $ Default Mineral Soil Group: num [1:76] 9 7 9 7 6 5 8 6 8 5 ...\n $ Multiple MSG Flag         : chr [1:76] NA \"Yes\" NA \"Yes\" ...\n $ Flag - MSG Values         : num [1:76] NA 710 NA 710 610 58 NA 668 NA NA ...\n $ Flag - Fields             : chr [1:76] NA \"Capability Class,Soil Modifier\" NA \"Capability Class,Soil Modifier\" ...\n $ Capability Class (FM5 CAP): chr [1:76] \"8S\" \"4W\" \"7W\" \"4W\" ...\n $ Soil Temp. Regime         : chr [1:76] NA \"Frigid\" \"Frigid\" \"Frigid\" ...\n $ Soil Modifier             : chr [1:76] \"Sand/ Gravelly\" \"Drained\" \"Frequently Flooded\" \"Drained\" ...\n $ Soil Slope                : chr [1:76] NA \"\\\"00-02\\\"\" \"\\\"00-03\\\"\" \"\\\"00-03\\\"\" ...\n $ Soil Name                 : chr [1:76] \"PITS\" \"PLEASANT LAKE-BURNT VL\" \"DAWSON-FLUV-LOXLEY\" \"LOXLEY-DAWSON\" ...\n $ Drainage                  : chr [1:76] NA \"Bog\" \"Poorly Drained\" \"Bog\" ...\n $ Modifier                  : chr [1:76] NA NA NA NA ...\n $ Texture                   : chr [1:76] NA \"Muck\" \"Peat\" \"Muck\" ...\n $ Flooding                  : chr [1:76] NA NA NA NA ...\n $ Lime                      : chr [1:76] NA \"Requires lime additions within every rotation\" \"Requires lime additions within every rotation\" \"Requires lime additions within every rotation\" ...\n $ Rotation                  : num [1:76] 0 5 0 5 5 5 NA 3 NA 5 ...\n $ Corn Yield (ton/acre)     : num [1:76] 0 9 0 9 9 12 0 10.5 0 12 ...\n $ Hay Yield (ton/acre)      : num [1:76] 0 1.28 0 1.28 1.62 ...\n $ Change                    : chr [1:76] NA NA NA NA ...\n $ TDN (ton/acre)            : num [1:76] 0 1.22 0 1.22 1.31 1.86 0 1.31 0 1.86 ...\n $ Index (TDN)               : num [1:76] 0 26.9 0 26.9 28.8 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   County = col_character(),\n  ..   County_MAPSYM = col_character(),\n  ..   MAPSYM = col_character(),\n  ..   MUKEY = col_double(),\n  ..   `Default Mineral Soil Group` = col_double(),\n  ..   `Multiple MSG Flag` = col_character(),\n  ..   `Flag - MSG Values` = col_double(),\n  ..   `Flag - Fields` = col_character(),\n  ..   `Capability Class (FM5 CAP)` = col_character(),\n  ..   `Soil Temp. Regime` = col_character(),\n  ..   `Soil Modifier` = col_character(),\n  ..   `Soil Slope` = col_character(),\n  ..   `Soil Name` = col_character(),\n  ..   Drainage = col_character(),\n  ..   Modifier = col_character(),\n  ..   Texture = col_character(),\n  ..   Flooding = col_character(),\n  ..   Lime = col_character(),\n  ..   Rotation = col_double(),\n  ..   `Corn Yield (ton/acre)` = col_double(),\n  ..   `Hay Yield (ton/acre)` = col_double(),\n  ..   Change = col_character(),\n  ..   `TDN (ton/acre)` = col_double(),\n  ..   `Index (TDN)` = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\nShow the code\nlibrary(dplyr)\n\n# Convert categorical variables to numeric\ndata$Soil_Temp_Regime &lt;- as.numeric(as.factor(data$`Soil Temp. Regime`))\ndata$Texture &lt;- as.numeric(as.factor(data$Texture))\n\n# Calculate the correlation matrix for soil characteristics and yields\ncorrelation_analysis &lt;- data %&gt;%\n  select(`Corn Yield (ton/acre)`, `Hay Yield (ton/acre)`, `Default Mineral Soil Group`, Soil_Temp_Regime, Texture, `TDN (ton/acre)`, `Index (TDN)`) %&gt;%\n  cor(use = \"complete.obs\")  # Handling missing data by using complete cases\n\n# Print the correlation matrix\nprint(correlation_analysis)\n\n\n                           Corn Yield (ton/acre) Hay Yield (ton/acre)\nCorn Yield (ton/acre)                 1.00000000            0.9169183\nHay Yield (ton/acre)                  0.91691827            1.0000000\nDefault Mineral Soil Group           -0.82813203           -0.9180929\nSoil_Temp_Regime                      0.23815459            0.2845040\nTexture                               0.08286803            0.1029971\nTDN (ton/acre)                        0.90658074            0.9701361\nIndex (TDN)                           0.90649832            0.9702159\n                           Default Mineral Soil Group Soil_Temp_Regime\nCorn Yield (ton/acre)                     -0.82813203        0.2381546\nHay Yield (ton/acre)                      -0.91809287        0.2845040\nDefault Mineral Soil Group                 1.00000000       -0.2638517\nSoil_Temp_Regime                          -0.26385171        1.0000000\nTexture                                   -0.07981716        0.2974915\nTDN (ton/acre)                            -0.96143034        0.2680291\nIndex (TDN)                               -0.96151696        0.2680601\n                               Texture TDN (ton/acre) Index (TDN)\nCorn Yield (ton/acre)       0.08286803      0.9065807  0.90649832\nHay Yield (ton/acre)        0.10299708      0.9701361  0.97021589\nDefault Mineral Soil Group -0.07981716     -0.9614303 -0.96151696\nSoil_Temp_Regime            0.29749155      0.2680291  0.26806005\nTexture                     1.00000000      0.0771529  0.07742231\nTDN (ton/acre)              0.07715290      1.0000000  0.99999561\nIndex (TDN)                 0.07742231      0.9999956  1.00000000\n\n\n\n\nShow the code\nlibrary(plotly)\nlibrary(reshape2)\n\n# Assuming 'correlation_analysis' is your correlation matrix from earlier\ncor_data &lt;- as.data.frame(correlation_analysis)\ncor_data$Variable &lt;- rownames(cor_data)  # Add a new column for the row names\n\n# Convert the wide format data frame to a long format\ncor_long &lt;- melt(cor_data, id.vars = 'Variable')\n\n# Create the heatmap with Plotly\np &lt;- plot_ly(data = cor_long, x = ~variable, y = ~Variable, z = ~value, type = 'heatmap', colors = colorRamp(c(\"red\", \"yellow\", \"green\")),\n             hoverinfo = 'text',\n             text = ~paste('Correlation: ', round(value, 2)),\n             colorbar = list(title = 'Correlation Coefficient')) %&gt;%\n  layout(title = 'Correlation Matrix Heatmap',\n         xaxis = list(title = 'Variable', tickangle = 90, side = 'top'),  # Correctly set the tick angle here\n         yaxis = list(title = 'Variable', ticksuffix = '  '),\n         margin = list(l = 150, b = 150))  # Adjust margins if needed\n\n# Print the plot\np\n\n\n\n\n\n\nResearch Question 2 : How does the moderate positive correlation between ‘Drainage’ and ‘Flooding’ in the dataset influence our understanding of soil characteristics and their relationship to flooding risk?\n\n\nShow the code\n# Load necessary library\nlibrary(dplyr)\n\n# Read the dataset\ndata &lt;- read.csv(\"C:\\\\Users\\\\Vijay\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Convert factors to numeric if necessary (assuming 'Flooding' is binary or categorical)\ndata$Drainage &lt;- as.numeric(as.factor(data$Drainage))\ndata$Flooding &lt;- as.numeric(as.factor(data$Flooding))\n\n# Handling NA values\ndata &lt;- na.omit(data)\n\n# Using cor.test to determine the correlation\ncor_test &lt;- cor.test(data$Drainage, data$Flooding)\nprint(cor_test)\n\n\n\n    Pearson's product-moment correlation\n\ndata:  data$Drainage and data$Flooding\nt = 16.142, df = 407, p-value &lt; 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.5618257 0.6804973\nsample estimates:\n      cor \n0.6247561 \n\n\n\n\nShow the code\n# Load necessary libraries\nlibrary(randomForest)\n\n\nWarning: package 'randomForest' was built under R version 4.3.3\n\n\nrandomForest 4.7-1.1\n\n\nType rfNews() to see new features/changes/bug fixes.\n\n\n\nAttaching package: 'randomForest'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nShow the code\nlibrary(dplyr)\ncolnames(data)\n\n\n [1] \"County\"                     \"County_MAPSYM\"             \n [3] \"MAPSYM\"                     \"MUKEY\"                     \n [5] \"Default.Mineral.Soil.Group\" \"Multiple.MSG.Flag\"         \n [7] \"Flag...MSG.Values\"          \"Flag...Fields\"             \n [9] \"Capability.Class..FM5.CAP.\" \"Soil.Temp..Regime\"         \n[11] \"Soil.Modifier\"              \"Soil.Slope\"                \n[13] \"Soil.Name\"                  \"Drainage\"                  \n[15] \"Modifier\"                   \"Texture\"                   \n[17] \"Flooding\"                   \"Lime\"                      \n[19] \"Rotation\"                   \"Corn.Yield..ton.acre.\"     \n[21] \"Hay.Yield..ton.acre.\"       \"Change\"                    \n[23] \"TDN..ton.acre.\"             \"Index..TDN.\"               \n\n\nShow the code\n# Handling NA values - assuming you're interested in predicting 'Flooding'\ndata_clean &lt;- na.omit(data[, c(\"Flooding\", \"Drainage\", \"Texture\", \"Soil.Slope\", \"Capability.Class..FM5.CAP.\")])\ndata_clean$Texture &lt;- as.numeric(as.factor(data_clean$Texture))\n\n\n\n# Convert all categorical variables to factor type\ndata_clean$Capability_Class &lt;- as.factor(data_clean$\"Capability.Class..FM5.CAP.\")\n\n\n# Fit Random Forest model\nset.seed(123)  # for reproducibility\nrf_model &lt;- randomForest(Flooding ~ ., data=data_clean, ntree=500, importance=TRUE)\n\n\nWarning in randomForest.default(m, y, ...): The response has five or fewer\nunique values.  Are you sure you want to do regression?\n\n\nShow the code\n# Print model summary\nprint(rf_model)\n\n\n\nCall:\n randomForest(formula = Flooding ~ ., data = data_clean, ntree = 500,      importance = TRUE) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 1\n\n          Mean of squared residuals: 0.08768223\n                    % Var explained: 91.48\n\n\nShow the code\n# Plot importance of variables\nvarImpPlot(rf_model)\n\n\n\n\n\n\n\nShow the code\n# Load necessary library\nlibrary(stats)\n\ndata$Texture &lt;- as.numeric(as.factor(data$Texture))  # Convert categorical to numeric\ndata$Drainage &lt;- as.numeric(as.factor(data$Drainage))  # Convert categorical to numeric if needed\n\n# Fit Multiple Regression Model with Interaction Term\nmodel_interaction &lt;- lm(Flooding ~ Drainage * Texture, data = data)\n\n# Summary of the model to see coefficients and significance\nsummary(model_interaction)\n\n\n\nCall:\nlm(formula = Flooding ~ Drainage * Texture, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.0282 -0.2530 -0.1270  0.3186  2.4724 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      -0.349160   0.133186  -2.622  0.00908 ** \nDrainage          0.229149   0.015232  15.044  &lt; 2e-16 ***\nTexture           0.294757   0.020929  14.084  &lt; 2e-16 ***\nDrainage:Texture -0.020150   0.002235  -9.018  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.6614 on 405 degrees of freedom\nMultiple R-squared:  0.5791,    Adjusted R-squared:  0.576 \nF-statistic: 185.8 on 3 and 405 DF,  p-value: &lt; 2.2e-16\n\n\n\n\nShow the code\n# Load necessary libraries\nlibrary(randomForest)\nlibrary(dplyr)\n\n# Prepare the data\ndata &lt;- mutate(data, Drainage_Texture_Interaction = Drainage * Texture)\n\n# Fit Random Forest Model including the engineered interaction feature\nset.seed(123)  # for reproducibility\nrf_model_interaction &lt;- randomForest(Flooding ~ Drainage + Texture + Drainage_Texture_Interaction, data = data, ntree = 500)\n\n\nWarning in randomForest.default(m, y, ...): The response has five or fewer\nunique values.  Are you sure you want to do regression?\n\n\nShow the code\n# Evaluate the model (assuming Flooding is continuous; adjust as necessary)\nprint(rf_model_interaction)\n\n\n\nCall:\n randomForest(formula = Flooding ~ Drainage + Texture + Drainage_Texture_Interaction,      data = data, ntree = 500) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 1\n\n          Mean of squared residuals: 0.1969851\n                    % Var explained: 80.86\n\n\nShow the code\n# Optionally, view the importance of the new interaction feature\nimportance(rf_model_interaction)\n\n\n                             IncNodePurity\nDrainage                          115.0117\nTexture                           121.6274\nDrainage_Texture_Interaction      131.4226\n\n\n\n\nShow the code\n# Load necessary libraries\nlibrary(caret)\n\n\nWarning: package 'caret' was built under R version 4.3.3\n\n\nLoading required package: lattice\n\n\nShow the code\nlibrary(randomForest)\n\ndata$Texture &lt;- as.numeric(as.factor(data$Texture))\ndata$Drainage &lt;- as.numeric(as.factor(data$Drainage))\n\n# Define training control\ntrain_control &lt;- trainControl(method = \"cv\", number = 10)  # 10-fold cross-validation\n\n# Fit Linear Regression Model using cross-validation\nlm_model_cv &lt;- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"lm\", trControl = train_control)\n\n# Fit Random Forest Model using cross-validation\nrf_model_cv &lt;- train(Flooding ~ Drainage + Texture + Drainage:Texture, data = data, method = \"rf\", trControl = train_control, ntree = 500)\n\n\nnote: only 2 unique complexity parameters in default grid. Truncating the grid to 2 .\n\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\nWarning in randomForest.default(x, y, mtry = param$mtry, ...): The response has\nfive or fewer unique values.  Are you sure you want to do regression?\n\n\nShow the code\n# Summary of cross-validation results\nprint(lm_model_cv)\n\n\nLinear Regression \n\n409 samples\n  2 predictor\n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 367, 368, 368, 368, 369, 367, ... \nResampling results:\n\n  RMSE       Rsquared   MAE      \n  0.6608545  0.5871187  0.4143339\n\nTuning parameter 'intercept' was held constant at a value of TRUE\n\n\nShow the code\nprint(rf_model_cv)\n\n\nRandom Forest \n\n409 samples\n  2 predictor\n\nNo pre-processing\nResampling: Cross-Validated (10 fold) \nSummary of sample sizes: 368, 369, 368, 369, 368, 367, ... \nResampling results across tuning parameters:\n\n  mtry  RMSE       Rsquared   MAE      \n  2     0.4282331  0.8134469  0.1653817\n  3     0.4379896  0.8039825  0.1682584\n\nRMSE was used to select the optimal model using the smallest value.\nThe final value used for the model was mtry = 2.\n\n\nDiagnostic Plots for Linear Regression\n\n\nShow the code\n# Fit the linear model\nlm_model &lt;- lm(Flooding ~ Drainage + Texture + Drainage:Texture, data = data)\n\n# Diagnostic plots\npar(mfrow = c(2, 2))\nplot(lm_model)\n\n\n\n\n\nResearch Question 3: How does the presence of multiple mineral soil group (Multiple MSG Flag) affect corn and hay yield across different counties?\n\n\nShow the code\n# Load necessary libraries\nlibrary(readr)  # For reading CSV files\nlibrary(dplyr)  # For data manipulation\nlibrary(ggplot2)  # For creating visualizations\ndata &lt;- read.csv(\"C:\\\\Users\\\\Vijay\\\\Downloads\\\\NYSERDA_2023_Soils_Data_for_use_in_the_Large-Scale_Renewables_and_NY-Sun_Programs.csv\")\n\n# Check all column names in the dataset\ncolnames(data)\n\n\n [1] \"County\"                     \"County_MAPSYM\"             \n [3] \"MAPSYM\"                     \"MUKEY\"                     \n [5] \"Default.Mineral.Soil.Group\" \"Multiple.MSG.Flag\"         \n [7] \"Flag...MSG.Values\"          \"Flag...Fields\"             \n [9] \"Capability.Class..FM5.CAP.\" \"Soil.Temp..Regime\"         \n[11] \"Soil.Modifier\"              \"Soil.Slope\"                \n[13] \"Soil.Name\"                  \"Drainage\"                  \n[15] \"Modifier\"                   \"Texture\"                   \n[17] \"Flooding\"                   \"Lime\"                      \n[19] \"Rotation\"                   \"Corn.Yield..ton.acre.\"     \n[21] \"Hay.Yield..ton.acre.\"       \"Change\"                    \n[23] \"TDN..ton.acre.\"             \"Index..TDN.\"               \n\n\n\n\nShow the code\n# Ensure 'Multiple MSG Flag' includes 'No' as a factor level correctly\ndata$`Multiple MSG Flag` &lt;- factor(data$`Multiple.MSG.Flag`, levels = c(\"Yes\", \"No\"))\n\n# Now safely replace NA values with \"No\"\ndata$`Multiple MSG Flag`[is.na(data$`Multiple MSG Flag`)] &lt;- \"No\"\n\n# Verify changes to ensure \"No\" is now included and NAs are handled\ntable(data$`Multiple MSG Flag`)\n\n\n\n Yes   No \n 451 8062 \n\n\n\n\nShow the code\nlibrary(plotly)\n\n# Create ggplot for Corn Yield\np_corn &lt;- ggplot(data, aes(x = `Multiple.MSG.Flag`, y = `Corn.Yield..ton.acre.`)) +\n  geom_boxplot(fill = \"blue\") +\n  labs(title = \"Corn Yield by Multiple MSG Flag\", x = \"Multiple MSG Flag\", y = \"Corn Yield\")\n\n# Convert to plotly\nplotly_corn &lt;- ggplotly(p_corn)\n\n# Display the plots\nplotly_corn\n\n\n\n\n\n\n\n\nShow the code\n# Create ggplot for Hay Yield\np_hay &lt;- ggplot(data, aes(x = `Multiple.MSG.Flag`, y = `Hay.Yield..ton.acre.`)) +\n  geom_boxplot(fill = \"green\") +\n  labs(title = \"Hay Yield by Multiple MSG Flag\", x = \"Multiple MSG Flag\", y = \"Hay Yield\")\n\nplotly_hay &lt;- ggplotly(p_hay)\nplotly_hay"
  },
  {
    "objectID": "Projects.html",
    "href": "Projects.html",
    "title": "Projects",
    "section": "",
    "text": "Using Design Expert software and Design of Experiments, the Response Surface Optimization of process parameters, such as reaction time, mass percentage of catalyst (NaOH), and volumetric percentage of methanol to oil, was carried out in the production of biodiesel from used cooking oil.\n\nAnalysis of Variance and multiple regression analysis were used to check the p-values, model summaries, regression equations and the percentage contribution of each component.\nThe optimized biodiesel was tested for its properties, compared to ASTM and EN standards, and found to be within limits.\nPerformance test and emission test were conducted in 4 Stroke diesel engine for different blends"
  },
  {
    "objectID": "Projects.html#response-surface-optimization-of-biodiesel-from-used-cooking-oil-for-the-application-in-ci-engine-sept22-apr-23",
    "href": "Projects.html#response-surface-optimization-of-biodiesel-from-used-cooking-oil-for-the-application-in-ci-engine-sept22-apr-23",
    "title": "Projects",
    "section": "",
    "text": "Using Design Expert software and Design of Experiments, the Response Surface Optimization of process parameters, such as reaction time, mass percentage of catalyst (NaOH), and volumetric percentage of methanol to oil, was carried out in the production of biodiesel from used cooking oil.\n\nAnalysis of Variance and multiple regression analysis were used to check the p-values, model summaries, regression equations and the percentage contribution of each component.\nThe optimized biodiesel was tested for its properties, compared to ASTM and EN standards, and found to be within limits.\nPerformance test and emission test were conducted in 4 Stroke diesel engine for different blends"
  },
  {
    "objectID": "Projects.html#working-with-automatic-strapping-machine-in-steel-rolling-mill-feb-23-mar-23",
    "href": "Projects.html#working-with-automatic-strapping-machine-in-steel-rolling-mill-feb-23-mar-23",
    "title": "Projects",
    "section": "Working with Automatic Strapping Machine in Steel Rolling Mill | Feb 23 – Mar 23",
    "text": "Working with Automatic Strapping Machine in Steel Rolling Mill | Feb 23 – Mar 23\nWe had an opportunity to intern at Light and Medium Merchant Mill (LMMM) section at Visakhapatnam Steel Plant.\n\nLearn how steel is produced starting from raw materials.\nExperienced how data is collected and analysed for examining steel rolls failures.\nStudied how Billets are transformed to bars in LMMM and the worked with Automatic Strapping Machine."
  },
  {
    "objectID": "Projects.html#design-of-knuckle-joint-model-in-catia-v5-aug-22",
    "href": "Projects.html#design-of-knuckle-joint-model-in-catia-v5-aug-22",
    "title": "Projects",
    "section": "Design of Knuckle Joint Model in CATIA V5 | Aug 22",
    "text": "Design of Knuckle Joint Model in CATIA V5 | Aug 22\nProject work to obtain hands on experience after the 5 day CATIA modelling training..\n\nUtilized CATIA V5 software to design and create individual components of the Knuckle joint, gaining a thorough understanding of its construction."
  },
  {
    "objectID": "Projects.html#from-concept-to-creation-manufacturing-an-electric-go-kart-nov21-aug-22",
    "href": "Projects.html#from-concept-to-creation-manufacturing-an-electric-go-kart-nov21-aug-22",
    "title": "Projects",
    "section": "From Concept to Creation: Manufacturing an Electric Go-Kart | Nov21 – Aug 22",
    "text": "From Concept to Creation: Manufacturing an Electric Go-Kart | Nov21 – Aug 22\nWe fabricated an Electric go kart for the first time in our campus and participated in Go-Kart Design Challenge competition. 30 students from five different departments worked together to create an electric kart from beginning to end.\n\nWorked as in charge of power department which played crucial role in selecting motor and battery specification.\nManufactured 60V 75Ah Li-ion battery under expert supervision\nDeveloped a business model for an indoor go-kart entertainment park. For better understanding the preferences and needs of potential customers, we conducted surveys and employed data visualization techniques to analyze and present the collected data effectively."
  },
  {
    "objectID": "Projects.html#collecting-technical-data-for-animated-videos-on-non-destructive-testing-a-comprehensive-investigation-may-21-may-22",
    "href": "Projects.html#collecting-technical-data-for-animated-videos-on-non-destructive-testing-a-comprehensive-investigation-may-21-may-22",
    "title": "Projects",
    "section": "Collecting Technical Data for Animated Videos on Non-Destructive Testing: A Comprehensive Investigation | May 21 – May 22",
    "text": "Collecting Technical Data for Animated Videos on Non-Destructive Testing: A Comprehensive Investigation | May 21 – May 22\nGroup of 4 students collaborated with iNuCom India Limited in Hyderabad, India, to prepare technical data for the creation of animation videos for non-destructive techniques (NDT).\n\nTransformed unstructured data to structured data.\nCollected all the required data for 8 modules of NDT and explained the working of each process, along with an overview of the different components utilized in each module."
  },
  {
    "objectID": "research3.html",
    "href": "research3.html",
    "title": "Research question 3",
    "section": "",
    "text": "Question : How does the presence of multiple mineral soil group (Multiple MSG Flag) affect corn and hay yield across different counties, and can these indicators be used to predict yield variations effectively using regression and decision tree models.\nThe presence of multiple mineral soil groups (Multiple MSG Flag) positively affects both corn and hay yields. Data analysis shows that fields with diverse soil groups tend to yield higher compared to fields without such diversity. Specifically, regression analysis revealed significant increases in yield for areas with multiple soil groups: corn yields decrease by about 2.817 tons per acre and hay yields by about 0.440 tons per acre in the absence of soil diversity.\nHowever, the capability of regression and decision tree models (Random Forest) to predict these yield variations effectively is limited. Both models demonstrated low R-squared values, indicating they capture a small fraction of the variability in yields. For corn, the R-squared was around 0.015, and for hay, about 0.009. These results suggest that while there is a clear trend linking soil diversity to higher yields, other unmodeled factors also play significant roles in yield variability. Therefore, these indicators alone may not be sufficient to predict yield variations effectively without incorporating additional data and refining the modeling approaches.\nMethodology - Data Preparation: The analysis involved preparing the dataset by ensuring correct factor levels for the `Multiple MSG Flag` and scaling yield data for model compatibility. - Modeling Approach: - Regression Analysis: To quantify the direct impact of soil diversity on yields. - Random Forest Analysis: To assess the capability of decision tree models in predicting yields based on soil diversit\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nRows: 8513 Columns: 24\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (16): County, County_MAPSYM, MAPSYM, Multiple MSG Flag, Flag - Fields, C...\ndbl  (8): MUKEY, Default Mineral Soil Group, Flag - MSG Values, Rotation, Co...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n [1] \"County\"                     \"County_MAPSYM\"             \n [3] \"MAPSYM\"                     \"MUKEY\"                     \n [5] \"Default Mineral Soil Group\" \"Multiple MSG Flag\"         \n [7] \"Flag - MSG Values\"          \"Flag - Fields\"             \n [9] \"Capability Class (FM5 CAP)\" \"Soil Temp. Regime\"         \n[11] \"Soil Modifier\"              \"Soil Slope\"                \n[13] \"Soil Name\"                  \"Drainage\"                  \n[15] \"Modifier\"                   \"Texture\"                   \n[17] \"Flooding\"                   \"Lime\"                      \n[19] \"Rotation\"                   \"Corn Yield (ton/acre)\"     \n[21] \"Hay Yield (ton/acre)\"       \"Change\"                    \n[23] \"TDN (ton/acre)\"             \"Index (TDN)\"               \n\n\n\n# Ensure 'Multiple MSG Flag' includes 'No' as a factor level correctly\ndata$`Multiple MSG Flag` &lt;- factor(data$`Multiple MSG Flag`, levels = c(\"Yes\", \"No\"))\n\n# Now safely replace NA values with \"No\"\ndata$`Multiple MSG Flag`[is.na(data$`Multiple MSG Flag`)] &lt;- \"No\"\n\n# Verify changes to ensure \"No\" is now included and NAs are handled\ntable(data$`Multiple MSG Flag`)\n\n\n Yes   No \n 451 8062 \n\n\n\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Create ggplot for Corn Yield\np_corn &lt;- ggplot(data, aes(x = `Multiple MSG Flag`, y = `Corn Yield (ton/acre)`)) +\n  geom_boxplot(fill = \"blue\") +\n  labs(title = \"Corn Yield by Multiple MSG Flag\", x = \"Multiple MSG Flag\", y = \"Corn Yield\")\n\n# Convert to plotly\nplotly_corn &lt;- ggplotly(p_corn)\n\n# Display the plots\nplotly_corn\n\n\n\n\n\n\n# Create ggplot for Hay Yield\np_hay &lt;- ggplot(data, aes(x = `Multiple MSG Flag`, y = `Hay Yield (ton/acre)`)) +\n  geom_boxplot(fill = \"green\") +\n  labs(title = \"Hay Yield by Multiple MSG Flag\", x = \"Multiple MSG Flag\", y = \"Hay Yield\")\n\nplotly_hay &lt;- ggplotly(p_hay)\nplotly_hay\n\n\n\n\n\nVisual Analysis - Box Plots: Displayed differences in yield distributions between fields with and without multiple mineral soil groups. Fields with multiple groups showed higher median yields and greater variability, suggesting a positive impact of soil diversity on yields.\n\n# Linear regression for Corn Yield\nlm_corn &lt;- lm(`Corn Yield (ton/acre)` ~ `Multiple MSG Flag`, data = data)\nsummary(lm_corn)\n\n\nCall:\nlm(formula = `Corn Yield (ton/acre)` ~ `Multiple MSG Flag`, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-12.592  -3.592   1.475   4.475  30.785 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            12.5918     0.2928  43.004   &lt;2e-16 ***\n`Multiple MSG Flag`No  -2.8169     0.3009  -9.362   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.218 on 8511 degrees of freedom\nMultiple R-squared:  0.01019,   Adjusted R-squared:  0.01008 \nF-statistic: 87.65 on 1 and 8511 DF,  p-value: &lt; 2.2e-16\n\n\nRegression Analysis - Corn Yield: - The regression model indicated a significant decrease in yield (by approximately 2.8169 tons per acre) for fields without multiple soil groups, confirming that diverse soil conditions contribute positively to corn yield. - Model statistics: The low R-squared value (0.015) implies that while the model captures the trend, other factors also significantly influence yield variations.\n\n# Linear regression for Hay Yield\nlm_hay &lt;- lm(`Hay Yield (ton/acre)` ~ `Multiple MSG Flag`, data = data)\nsummary(lm_hay)\n\n\nCall:\nlm(formula = `Hay Yield (ton/acre)` ~ `Multiple MSG Flag`, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.3125 -0.9126  0.0774  0.8074  6.1674 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            2.31247    0.05739  40.295  &lt; 2e-16 ***\n`Multiple MSG Flag`No -0.43985    0.05897  -7.459  9.6e-14 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.219 on 8511 degrees of freedom\nMultiple R-squared:  0.006494,  Adjusted R-squared:  0.006377 \nF-statistic: 55.63 on 1 and 8511 DF,  p-value: 9.601e-14\n\n\n- Hay Yield: - Similar trends were observed for hay, with a decrease of 0.43985 tons per acre in fields lacking soil diversity. - The model’s explanatory power was also limited (R-squared = 0.009), suggesting the influence of additional unmodelled factors.\n\n# Load necessary libraries\nlibrary(caret)       # for data preparation and model evaluation\n\nWarning: package 'caret' was built under R version 4.3.3\n\n\nLoading required package: lattice\n\nlibrary(randomForest) # for random forest modeling\n\nWarning: package 'randomForest' was built under R version 4.3.3\n\n\nrandomForest 4.7-1.1\n\n\nType rfNews() to see new features/changes/bug fixes.\n\n\n\nAttaching package: 'randomForest'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\nlibrary(e1071)       # for SVM\n\nWarning: package 'e1071' was built under R version 4.3.3\n\n# Prepare data (assuming 'data' is already loaded and cleaned)\n# Ensure factor levels are correctly assigned\ndata$`Multiple MSG Flag` &lt;- factor(data$`Multiple MSG Flag`, levels = c(\"No\", \"Yes\"))\n\n# Split data into training and testing sets\nset.seed(123)  # for reproducibility\ntraining_indices &lt;- createDataPartition(data$`Corn Yield (ton/acre)`, p = 0.8, list = TRUE)\ntrain_data &lt;- data[training_indices[[1]], ]\ntest_data &lt;- data[-training_indices[[1]], ]\n\n# Scale data for SVM\npreproc &lt;- preProcess(train_data[, c(\"Corn Yield (ton/acre)\", \"Hay Yield (ton/acre)\")], method = c(\"center\", \"scale\"))\ntrain_scaled &lt;- predict(preproc, train_data)\ntest_scaled &lt;- predict(preproc, test_data)\n\nRandom Forest Analysis - Predictive Performance: - Predictions for corn yields were consistently around 9.777948 tons per acre across samples, indicating a possible underfitting where the model could not capture the full variability in the data. - Hay yield predictions were also constant (around 1.868529 tons per acre), further illustrating the model’s limitations in dealing with the dataset’s complexities.\n\n# Check for missing values in the relevant columns of test_data\nsum(is.na(test_data$`Corn Yield (ton/acre)`))\n\n[1] 0\n\nsum(is.na(test_data$`Multiple MSG Flag`))\n\n[1] 0\n\n# If there are missing values, decide on a strategy:\ntest_data &lt;- test_data[!is.na(test_data$`Corn Yield (ton/acre)`) & !is.na(test_data$`Multiple MSG Flag`), ]\n\nmedian_corn_yield &lt;- median(train_data$`Corn Yield (ton/acre)`, na.rm = TRUE)\ntest_data$`Corn Yield (ton/acre)`[is.na(test_data$`Corn Yield (ton/acre)`)] &lt;- median_corn_yield\n\n\n# Include Hay Yield in the cleaned test data\nclean_test_data &lt;- test_data[, c(\"Multiple MSG Flag\", \"Corn Yield (ton/acre)\", \"Hay Yield (ton/acre)\")]\n\n\nrf_model_corn &lt;- randomForest(y = train_data$`Corn Yield (ton/acre)`, x = train_data[, \"Multiple MSG Flag\", drop = FALSE], ntree = 500)\n# Predict using the Random Forest model on the updated clean test data\nrf_predictions &lt;- predict(rf_model_corn, newdata = clean_test_data)\n\n# Display the first few predictions to verify\nhead(rf_predictions)\n\n       1        2        3        4        5        6 \n9.779683 9.779683 9.779683 9.779683 9.779683 9.779683 \n\n\n\n# Evaluate the predictions using appropriate metrics (if your model output is designed to compare directly against Corn Yield)\nrf_results &lt;- postResample(rf_predictions, clean_test_data$`Corn Yield (ton/acre)`)\nprint(rf_results)\n\n      RMSE   Rsquared        MAE \n6.21426995 0.01484792 5.16820644 \n\n\n\n# Assuming rf_results contains RMSE, R-squared, and MAE\nmetrics_data &lt;- data.frame(\n  Metric = c(\"RMSE\", \"R-squared\", \"MAE\"),\n  Value = c(rf_results[\"RMSE\"], rf_results[\"Rsquared\"], rf_results[\"MAE\"])\n)\n\n# Print the data frame to check\nprint(metrics_data)\n\n            Metric      Value\nRMSE          RMSE 6.21426995\nRsquared R-squared 0.01484792\nMAE            MAE 5.16820644\n\n\n\nlibrary(plotly)\n\n# Create a bar chart\nplot &lt;- plot_ly(data = metrics_data, x = ~Metric, y = ~Value, type = 'bar', \n                marker = list(color = 'rgb(158,202,225)', line = list(color = 'rgb(8,48,107)', width = 1.5)))\nplot &lt;- layout(plot, title = \"Model Performance Metrics\",\n                yaxis = list(title = \"Value\"),\n                xaxis = list(title = \"Metric\"))\n\n# Render the plot\nplot\n\n\n\n\n\n\n# Gauge chart for R-squared\ngauge_plot &lt;- plot_ly(\n  domain = list(x = c(0, 1), y = c(0, 1)),\n  value = rf_results[\"Rsquared\"],\n  title = list(text = \"R-squared\"),\n  type = \"indicator\",\n  mode = \"gauge+number\",\n  gauge = list(\n    axis = list(range = c(0, 1)),\n    bar = list(color = \"darkblue\"),\n    steps = list(\n      list(range = c(0, 0.5), color = \"red\"),\n      list(range = c(0.5, 0.75), color = \"yellow\"),\n      list(range = c(0.75, 1), color = \"green\")\n    )\n  )\n)\n\n# Render the gauge chart\ngauge_plot\n\n\n\n\n\n\n# Train the Random Forest model for Hay Yield\nrf_model_hay &lt;- randomForest(y = train_data$`Hay Yield (ton/acre)`, x = train_data[, \"Multiple MSG Flag\", drop = FALSE], ntree = 500)\n\n# Check the model summary to see the details\nprint(summary(rf_model_hay))\n\n                Length Class  Mode     \ncall               4   -none- call     \ntype               1   -none- character\npredicted       6811   -none- numeric  \nmse              500   -none- numeric  \nrsq              500   -none- numeric  \noob.times       6811   -none- numeric  \nimportance         1   -none- numeric  \nimportanceSD       0   -none- NULL     \nlocalImportance    0   -none- NULL     \nproximity          0   -none- NULL     \nntree              1   -none- numeric  \nmtry               1   -none- numeric  \nforest            11   -none- list     \ncoefs              0   -none- NULL     \ny               6811   -none- numeric  \ntest               0   -none- NULL     \ninbag              0   -none- NULL     \n\n\n\n# Predict Hay Yield using the Random Forest model\nhay_predictions &lt;- predict(rf_model_hay, newdata = clean_test_data)\n\n# Display the first few predictions to verify\nhead(hay_predictions)\n\n       1        2        3        4        5        6 \n1.867155 1.867155 1.867155 1.867155 1.867155 1.867155 \n\n\n\n# Evaluate the model performance for Hay Yield predictions\nhay_results &lt;- postResample(hay_predictions, clean_test_data$`Hay Yield (ton/acre)`)\n\n# Print the results to see the performance metrics\nprint(hay_results)\n\n       RMSE    Rsquared         MAE \n1.211217319 0.008687405 1.015901999 \n\n\n\n# Assuming rf_results contains RMSE, R-squared, and MAE\nmetrics_datas &lt;- data.frame(\n  Metric = c(\"RMSE\", \"R-squared\", \"MAE\"),\n  Value = c(hay_results[\"RMSE\"], hay_results[\"Rsquared\"], hay_results[\"MAE\"])\n)\n\n# Print the data frame to check\nprint(metrics_data)\n\n            Metric      Value\nRMSE          RMSE 6.21426995\nRsquared R-squared 0.01484792\nMAE            MAE 5.16820644\n\n\n\nlibrary(plotly)\n\n# Create a bar chart\nplot &lt;- plot_ly(data = metrics_datas, x = ~Metric, y = ~Value, type = 'bar', \n                marker = list(color = 'rgb(158,202,225)', line = list(color = 'rgb(8,48,107)', width = 1.5)))\nplot &lt;- layout(plot, title = \"Model Performance Metrics\",\n                yaxis = list(title = \"Value\"),\n                xaxis = list(title = \"Metric\"))\n\n# Render the plot\nplot\n\n\n\n\n\n\n# Gauge chart for R-squared\ngauge_plot &lt;- plot_ly(\n  domain = list(x = c(0, 1), y = c(0, 1)),\n  value = hay_results[\"Rsquared\"],\n  title = list(text = \"R-squared\"),\n  type = \"indicator\",\n  mode = \"gauge+number\",\n  gauge = list(\n    axis = list(range = c(0, 1)),\n    bar = list(color = \"darkblue\"),\n    steps = list(\n      list(range = c(0, 0.5), color = \"red\"),\n      list(range = c(0.5, 0.75), color = \"yellow\"),\n      list(range = c(0.75, 1), color = \"green\")\n    )\n  )\n)\n\n# Render the gauge chart\ngauge_plot\n\n\n\n\n\nDiscussion\n- Interpretation of Results: The findings from both regression and random forest models consistently show that soil diversity positively affects agricultural yields. However, the limited variance explained by these models underscores the complexity of yield determination, which likely involves factors beyond soil diversity alone.\n- Model Limitations: The low R-squared values in both models indicate that future models should include more variables, such as climatic conditions, farming practices, and other soil parameters, to improve prediction accuracy.\nConclusion\n- Implications for Agricultural Practices: The study confirms the beneficial impact of soil diversity on yields, suggesting that policies and practices that enhance soil biodiversity could lead to increased agricultural productivity.\n- Recommendations for Further Research: It is recommended to extend this analysis by incorporating more diverse datasets and exploring more sophisticated machine learning models that can handle the dataset’s complexity better."
  }
]